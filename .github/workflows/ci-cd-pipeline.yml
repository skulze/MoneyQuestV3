name: MoneyQuest CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18.x'
  AWS_REGION: 'us-east-1'

jobs:
  # Code Quality and Security Checks
  quality-gate:
    name: üîç Quality Gate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run install:packages

      - name: TypeScript compilation check
        run: npm run typecheck

      - name: ESLint code analysis
        run: npm run lint

      - name: Security vulnerability scan
        run: |
          npm audit --audit-level=high
          node scripts/security-scan.js

      - name: Code formatting check
        run: npm run format:check

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-scan-results
          path: security-scan-results.json
          retention-days: 30

  # Automated Testing Suite
  testing:
    name: üß™ Testing Suite
    runs-on: ubuntu-latest
    needs: quality-gate
    strategy:
      matrix:
        test-suite: [unit, integration, security, e2e]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run install:packages

      - name: Run unit tests
        if: matrix.test-suite == 'unit'
        run: |
          npm run test:unit -- --coverage --watchAll=false
          npm run test:unit:backend -- --coverage --watchAll=false

      - name: Run integration tests
        if: matrix.test-suite == 'integration'
        run: npm run test:integration

      - name: Run security tests
        if: matrix.test-suite == 'security'
        run: npm run test:security

      - name: Install Playwright browsers
        if: matrix.test-suite == 'e2e'
        run: npx playwright install --with-deps

      - name: Run E2E tests
        if: matrix.test-suite == 'e2e'
        run: |
          npm run build
          npm run test:e2e

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.test-suite }}
          path: |
            coverage/
            test-results/
            playwright-report/
          retention-days: 30

  # Build and Package
  build:
    name: üî® Build Applications
    runs-on: ubuntu-latest
    needs: [quality-gate, testing]
    strategy:
      matrix:
        package: [website, backend, infrastructure]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run install:packages

      - name: Build website
        if: matrix.package == 'website'
        run: |
          cd packages/website
          npm run build

      - name: Build backend functions
        if: matrix.package == 'backend'
        run: |
          cd packages/backend
          npm run build

      - name: Validate CDK infrastructure
        if: matrix.package == 'infrastructure'
        run: |
          cd packages/infrastructure
          npm run synth
          npm run diff

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.package }}
          path: |
            packages/${{ matrix.package }}/dist/
            packages/${{ matrix.package }}/.next/
            packages/${{ matrix.package }}/cdk.out/
          retention-days: 7

  # Container Image Build (for future Docker deployment)
  docker-build:
    name: üê≥ Docker Build
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Build and push Docker images
        run: |
          # Website container
          docker build -t $ECR_REGISTRY/moneyquest-website:$GITHUB_SHA -f packages/website/Dockerfile .
          docker push $ECR_REGISTRY/moneyquest-website:$GITHUB_SHA

          # Tag as latest if main branch
          if [[ $GITHUB_REF == "refs/heads/main" ]]; then
            docker tag $ECR_REGISTRY/moneyquest-website:$GITHUB_SHA $ECR_REGISTRY/moneyquest-website:latest
            docker push $ECR_REGISTRY/moneyquest-website:latest
          fi
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}

  # Staging Deployment
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, docker-build]
    if: github.ref == 'refs/heads/develop' || (github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.moneyquest.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: |
          npm ci
          npm run install:packages

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-backend
          path: packages/backend/

      - name: Deploy infrastructure
        run: |
          cd packages/infrastructure
          npm run deploy -- --context environment=staging

      - name: Deploy backend functions
        run: |
          cd packages/backend
          npm run deploy:staging

      - name: Deploy website to S3/CloudFront
        run: |
          cd packages/website
          npm run build
          aws s3 sync .next/static/ s3://moneyquest-staging-static/
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_STAGING }} --paths "/*"

      - name: Run smoke tests
        run: |
          npm run test:smoke:staging

      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # Production Deployment
  deploy-production:
    name: üéØ Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docker-build]
    if: github.ref == 'refs/heads/main' || (github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://moneyquest.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: |
          npm ci
          npm run install:packages

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-backend
          path: packages/backend/

      - name: Blue-Green deployment preparation
        run: |
          # Create new deployment slot
          cd packages/infrastructure
          npm run deploy -- --context environment=production --context deploymentSlot=green

      - name: Deploy to green slot
        run: |
          cd packages/backend
          npm run deploy:production:green

      - name: Health check on green slot
        run: |
          npm run test:health:production:green

      - name: Traffic switch to green
        run: |
          cd packages/infrastructure
          npm run switch-traffic -- --to=green

      - name: Final health check
        run: |
          npm run test:smoke:production

      - name: Cleanup blue slot
        run: |
          cd packages/infrastructure
          npm run cleanup -- --slot=blue

      - name: Create release tag
        run: |
          git tag "release-$(date +'%Y%m%d-%H%M%S')"
          git push origin --tags

      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: 'repo,message,commit,author,action,eventName,ref,workflow'
        if: always()

  # Post-Deployment Monitoring
  post-deployment:
    name: üìä Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup monitoring alerts
        run: |
          # Set up CloudWatch alarms for the deployed environment
          node scripts/setup-monitoring.js

      - name: Performance baseline check
        run: |
          # Run Lighthouse CI for performance monitoring
          npm run lighthouse:ci

      - name: Security scan on deployed environment
        run: |
          # Run OWASP ZAP security scan
          npm run security:scan:deployed

      - name: Update status dashboard
        run: |
          # Update internal status dashboard
          curl -X POST ${{ secrets.STATUS_DASHBOARD_WEBHOOK }} \
            -H "Content-Type: application/json" \
            -d '{"status": "deployed", "version": "${{ github.sha }}", "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"}'

# Scheduled jobs
  scheduled-security-scan:
    name: üîí Scheduled Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run comprehensive security audit
        run: |
          npm run security:audit:full

      - name: Update security dashboard
        run: |
          # Update security metrics dashboard
          node scripts/update-security-metrics.js