"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/transactions/page",{

/***/ "(app-pages-browser)/./lib/database/IndexedDBWrapper.ts":
/*!******************************************!*\
  !*** ./lib/database/IndexedDBWrapper.ts ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IndexedDBWrapper: function() { return /* binding */ IndexedDBWrapper; }\n/* harmony export */ });\n/* harmony import */ var dexie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dexie */ \"(app-pages-browser)/../../node_modules/dexie/import-wrapper.mjs\");\n\nclass MoneyQuestDB extends dexie__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(){\n        super(\"MoneyQuestDB\");\n        this.version(1).stores({\n            users: \"id, cognitoId, email, createdAt\",\n            accounts: \"id, userId, name, type, isActive, createdAt\",\n            categories: \"id, userId, name, type, isDefault, createdAt\",\n            transactions: \"id, accountId, date, categoryId, isParent, parentTransactionId, createdAt\",\n            transaction_splits: \"id, transactionId, categoryId, createdAt\",\n            budgets: \"id, userId, categoryId, period, startDate, isActive, createdAt\",\n            currencies: \"id, code, name, isActive, createdAt\",\n            investments: \"id, portfolioId, symbol, createdAt\",\n            portfolios: \"id, userId, name, isActive, createdAt\",\n            net_worth_snapshots: \"id, userId, date, createdAt\"\n        });\n    }\n}\nclass IndexedDBWrapper {\n    // ==========================================\n    // Core CRUD Operations\n    // ==========================================\n    async insert(table, data) {\n        try {\n            const dbTable = this.getTable(table);\n            const id = await dbTable.add(data);\n            // Return the inserted data with the generated ID if needed\n            if (typeof id === \"string\" && data.id === undefined) {\n                return {\n                    ...data,\n                    id\n                };\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Failed to insert into \".concat(table, \":\"), error);\n            throw new Error(\"Database insert failed: \".concat(error));\n        }\n    }\n    async query(table, filter) {\n        try {\n            const dbTable = this.getTable(table);\n            let collection = dbTable.toCollection();\n            if (filter) {\n                // Apply filters based on the filter object\n                if (filter.id) {\n                    return [\n                        await dbTable.get(filter.id)\n                    ];\n                }\n                // Apply common filters\n                Object.keys(filter).forEach((key)=>{\n                    if (filter[key] !== undefined && filter[key] !== null) {\n                        collection = collection.filter((item)=>{\n                            const value = item[key];\n                            const filterValue = filter[key];\n                            // Handle date range filters\n                            if (key === \"startDate\" && value instanceof Date) {\n                                return value >= filterValue;\n                            }\n                            if (key === \"endDate\" && value instanceof Date) {\n                                return value <= filterValue;\n                            }\n                            // Handle exact matches\n                            return value === filterValue;\n                        });\n                    }\n                });\n            }\n            const results = await collection.toArray();\n            return results;\n        } catch (error) {\n            console.error(\"Failed to query \".concat(table, \":\"), error);\n            throw new Error(\"Database query failed: \".concat(error));\n        }\n    }\n    async update(table, id, data) {\n        try {\n            const dbTable = this.getTable(table);\n            // Get existing record\n            const existing = await dbTable.get(id);\n            if (!existing) {\n                throw new Error(\"Record with id \".concat(id, \" not found in \").concat(table));\n            }\n            // Merge updates\n            const updated = {\n                ...existing,\n                ...data,\n                updatedAt: new Date()\n            };\n            // Update in database\n            await dbTable.update(id, updated);\n            return updated;\n        } catch (error) {\n            console.error(\"Failed to update \".concat(table, \":\"), error);\n            throw new Error(\"Database update failed: \".concat(error));\n        }\n    }\n    async delete(table, id) {\n        try {\n            const dbTable = this.getTable(table);\n            await dbTable.delete(id);\n        } catch (error) {\n            console.error(\"Failed to delete from \".concat(table, \":\"), error);\n            throw new Error(\"Database delete failed: \".concat(error));\n        }\n    }\n    // ==========================================\n    // Analytics Queries\n    // ==========================================\n    async getCategorySpending(userId, startDate, endDate) {\n        try {\n            // Get user's transactions in date range\n            const transactions = await this.db.transactions.where(\"date\").between(startDate, endDate, true, true).filter((t)=>{\n                // We need to check if the account belongs to the user\n                // This would normally be a JOIN operation\n                return true; // Simplified for now\n            }).toArray();\n            // Get user's categories\n            const categories = await this.db.categories.where(\"userId\").equals(userId).toArray();\n            // Calculate spending by category\n            const categoryMap = new Map();\n            // Initialize categories\n            categories.forEach((cat)=>{\n                categoryMap.set(cat.id, {\n                    categoryId: cat.id,\n                    categoryName: cat.name,\n                    totalAmount: 0,\n                    transactionCount: 0,\n                    percentage: 0\n                });\n            });\n            // Aggregate transaction amounts\n            let totalSpending = 0;\n            for (const transaction of transactions){\n                if (transaction.categoryId) {\n                    const category = categoryMap.get(transaction.categoryId);\n                    if (category) {\n                        category.totalAmount += Math.abs(transaction.originalAmount);\n                        category.transactionCount += 1;\n                        totalSpending += Math.abs(transaction.originalAmount);\n                    }\n                }\n                // Handle splits\n                const splits = await this.db.transaction_splits.where(\"transactionId\").equals(transaction.id).toArray();\n                splits.forEach((split)=>{\n                    const category = categoryMap.get(split.categoryId);\n                    if (category) {\n                        category.totalAmount += Math.abs(split.amount);\n                        totalSpending += Math.abs(split.amount);\n                    }\n                });\n            }\n            // Calculate percentages\n            categoryMap.forEach((category)=>{\n                if (totalSpending > 0) {\n                    category.percentage = category.totalAmount / totalSpending * 100;\n                }\n            });\n            return Array.from(categoryMap.values()).filter((cat)=>cat.totalAmount > 0).sort((a, b)=>b.totalAmount - a.totalAmount);\n        } catch (error) {\n            console.error(\"Failed to get category spending:\", error);\n            throw new Error(\"Analytics query failed: \".concat(error));\n        }\n    }\n    async getBudgetProgress(userId) {\n        try {\n            const budgets = await this.db.budgets.where(\"userId\").equals(userId).filter((b)=>b.isActive).toArray();\n            const budgetStatus = [];\n            for (const budget of budgets){\n                var _categorySpending_find;\n                // Calculate period start/end dates\n                const now = new Date();\n                let periodStart = new Date(budget.startDate);\n                let periodEnd = new Date(budget.startDate);\n                if (budget.period === \"monthly\") {\n                    periodStart = new Date(now.getFullYear(), now.getMonth(), 1);\n                    periodEnd = new Date(now.getFullYear(), now.getMonth() + 1, 0);\n                } else if (budget.period === \"yearly\") {\n                    periodStart = new Date(now.getFullYear(), 0, 1);\n                    periodEnd = new Date(now.getFullYear(), 11, 31);\n                }\n                // Calculate spending for this category in the period\n                const categorySpending = await this.getCategorySpending(userId, periodStart, periodEnd);\n                const spent = ((_categorySpending_find = categorySpending.find((c)=>c.categoryId === budget.categoryId)) === null || _categorySpending_find === void 0 ? void 0 : _categorySpending_find.totalAmount) || 0;\n                // Get category details\n                const category = await this.db.categories.get(budget.categoryId);\n                budgetStatus.push({\n                    budgetId: budget.id,\n                    categoryId: budget.categoryId,\n                    categoryName: (category === null || category === void 0 ? void 0 : category.name) || \"Unknown Category\",\n                    budgetAmount: budget.amount,\n                    spentAmount: spent,\n                    remainingAmount: budget.amount - spent,\n                    percentageUsed: spent / budget.amount * 100,\n                    period: budget.period,\n                    isOverBudget: spent > budget.amount\n                });\n            }\n            return budgetStatus;\n        } catch (error) {\n            console.error(\"Failed to get budget progress:\", error);\n            throw new Error(\"Budget progress query failed: \".concat(error));\n        }\n    }\n    // ==========================================\n    // Export/Import Operations\n    // ==========================================\n    async exportAll() {\n        try {\n            const data = {};\n            // Export all tables\n            const tables = [\n                \"users\",\n                \"accounts\",\n                \"categories\",\n                \"transactions\",\n                \"transaction_splits\",\n                \"budgets\",\n                \"currencies\",\n                \"investments\",\n                \"portfolios\",\n                \"net_worth_snapshots\"\n            ];\n            for (const tableName of tables){\n                const table = this.getTable(tableName);\n                data[tableName] = await table.toArray();\n            }\n            return {\n                version: 1,\n                exportedAt: new Date(),\n                data\n            };\n        } catch (error) {\n            console.error(\"Failed to export data:\", error);\n            throw new Error(\"Data export failed: \".concat(error));\n        }\n    }\n    async importData(importData) {\n        try {\n            if (!importData.data) {\n                throw new Error(\"Invalid import data format\");\n            }\n            // Clear existing data (optional - might want to merge instead)\n            await this.db.transaction(\"rw\", [\n                this.db.users,\n                this.db.accounts,\n                this.db.categories,\n                this.db.transactions,\n                this.db.transaction_splits,\n                this.db.budgets,\n                this.db.currencies,\n                this.db.investments,\n                this.db.portfolios,\n                this.db.net_worth_snapshots\n            ], async ()=>{\n                // Import data table by table\n                const tables = [\n                    \"users\",\n                    \"accounts\",\n                    \"categories\",\n                    \"transactions\",\n                    \"transaction_splits\",\n                    \"budgets\",\n                    \"currencies\",\n                    \"investments\",\n                    \"portfolios\",\n                    \"net_worth_snapshots\"\n                ];\n                for (const tableName of tables){\n                    if (importData.data[tableName]) {\n                        const table = this.getTable(tableName);\n                        await table.bulkAdd(importData.data[tableName]);\n                    }\n                }\n            });\n        } catch (error) {\n            console.error(\"Failed to import data:\", error);\n            throw new Error(\"Data import failed: \".concat(error));\n        }\n    }\n    // ==========================================\n    // Utility Methods\n    // ==========================================\n    getTable(tableName) {\n        const table = this.db[tableName];\n        if (!table) {\n            throw new Error(\"Table \".concat(tableName, \" not found\"));\n        }\n        return table;\n    }\n    // Initialize with default data\n    async initialize(userId) {\n        try {\n            console.log(\"Starting IndexedDB initialization for user: \".concat(userId));\n            // Check if already initialized\n            const user = await this.db.users.get(userId);\n            if (user) {\n                console.log(\"User \".concat(userId, \" already initialized\"));\n                return; // Already initialized\n            }\n            console.log(\"Creating new user profile for: \".concat(userId));\n            // Create user record\n            const newUser = {\n                id: userId,\n                cognitoId: userId,\n                email: \"\".concat(userId, \"@moneyquest.com\"),\n                preferences: JSON.stringify({\n                    theme: \"light\",\n                    currency: \"USD\"\n                }),\n                createdAt: new Date(),\n                updatedAt: new Date()\n            };\n            // Create default currencies\n            const defaultCurrencies = [\n                {\n                    id: \"usd\",\n                    code: \"USD\",\n                    name: \"US Dollar\",\n                    symbol: \"$\",\n                    isActive: true,\n                    createdAt: new Date(),\n                    updatedAt: new Date()\n                },\n                {\n                    id: \"eur\",\n                    code: \"EUR\",\n                    name: \"Euro\",\n                    symbol: \"€\",\n                    isActive: true,\n                    createdAt: new Date(),\n                    updatedAt: new Date()\n                }\n            ];\n            // Create default categories\n            const defaultCategories = [\n                {\n                    name: \"Groceries\",\n                    type: \"expense\",\n                    color: \"#10B981\"\n                },\n                {\n                    name: \"Transportation\",\n                    type: \"expense\",\n                    color: \"#3B82F6\"\n                },\n                {\n                    name: \"Housing\",\n                    type: \"expense\",\n                    color: \"#8B5CF6\"\n                },\n                {\n                    name: \"Utilities\",\n                    type: \"expense\",\n                    color: \"#F59E0B\"\n                },\n                {\n                    name: \"Entertainment\",\n                    type: \"expense\",\n                    color: \"#EF4444\"\n                },\n                {\n                    name: \"Healthcare\",\n                    type: \"expense\",\n                    color: \"#EC4899\"\n                },\n                {\n                    name: \"Salary\",\n                    type: \"income\",\n                    color: \"#059669\"\n                },\n                {\n                    name: \"Investment\",\n                    type: \"income\",\n                    color: \"#0891B2\"\n                }\n            ].map((cat)=>({\n                    id: \"\".concat(userId, \"-\").concat(cat.name.toLowerCase().replace(/\\s+/g, \"-\")),\n                    userId,\n                    ...cat,\n                    isDefault: true,\n                    createdAt: new Date(),\n                    updatedAt: new Date()\n                }));\n            // Create some demo accounts for new users\n            const defaultAccounts = [\n                {\n                    id: \"\".concat(userId, \"-checking\"),\n                    userId,\n                    name: \"Checking Account\",\n                    type: \"checking\",\n                    balance: 2500.00,\n                    currencyId: \"usd\",\n                    isActive: true,\n                    createdAt: new Date(),\n                    updatedAt: new Date()\n                },\n                {\n                    id: \"\".concat(userId, \"-savings\"),\n                    userId,\n                    name: \"Savings Account\",\n                    type: \"savings\",\n                    balance: 12500.00,\n                    currencyId: \"usd\",\n                    isActive: true,\n                    createdAt: new Date(),\n                    updatedAt: new Date()\n                }\n            ];\n            // Initialize database with transaction\n            await this.db.transaction(\"rw\", [\n                this.db.users,\n                this.db.currencies,\n                this.db.categories,\n                this.db.accounts\n            ], async ()=>{\n                console.log(\"Creating user record...\");\n                await this.db.users.add(newUser);\n                console.log(\"Adding default currencies...\");\n                // Add currencies (only if not exist)\n                for (const currency of defaultCurrencies){\n                    const existing = await this.db.currencies.get(currency.id);\n                    if (!existing) {\n                        await this.db.currencies.add(currency);\n                    }\n                }\n                console.log(\"Adding default categories...\");\n                await this.db.categories.bulkAdd(defaultCategories);\n                console.log(\"Adding default accounts...\");\n                await this.db.accounts.bulkAdd(defaultAccounts);\n            });\n            console.log(\"Successfully initialized database for user: \".concat(userId));\n        } catch (error) {\n            console.error(\"Failed to initialize database:\", error);\n            throw new Error(\"Database initialization failed: \".concat(error));\n        }\n    }\n    constructor(){\n        this.db = new MoneyQuestDB();\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/database/IndexedDBWrapper.ts\n"));

/***/ })

});