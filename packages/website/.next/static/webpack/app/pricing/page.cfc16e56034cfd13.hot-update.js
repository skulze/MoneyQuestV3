"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/pricing/page",{

/***/ "(app-pages-browser)/./hooks/useSubscription.ts":
/*!**********************************!*\
  !*** ./hooks/useSubscription.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSubscription: () => (/* binding */ useSubscription)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../../node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_auth_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth/react */ \"(app-pages-browser)/../../node_modules/next-auth/react/index.js\");\n/* harmony import */ var next_auth_react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_auth_react__WEBPACK_IMPORTED_MODULE_1__);\n\n\n// Import types and utilities without initializing Stripe\nconst SUBSCRIPTION_TIERS = {\n    FREE: {\n        name: 'Free',\n        price: 0,\n        features: [\n            'Manual transaction entry',\n            'Basic budgeting',\n            'Local data storage',\n            'PDF/Excel reports',\n            'Up to 3 accounts'\n        ],\n        limits: {\n            users: 1,\n            accounts: 3,\n            transactions: 1000,\n            budgets: 5,\n            categories: 20\n        }\n    },\n    PLUS: {\n        name: 'Plus',\n        price: 2.99,\n        features: [\n            'Everything in Free',\n            'Multi-user collaboration',\n            'OCR receipt processing',\n            'Enhanced analytics',\n            'Up to 5 accounts',\n            'Priority support'\n        ],\n        limits: {\n            users: 5,\n            accounts: 5,\n            transactions: 10000,\n            budgets: 20,\n            categories: 50\n        }\n    },\n    PREMIUM: {\n        name: 'Premium',\n        price: 9.99,\n        features: [\n            'Everything in Plus',\n            'Bank account connections',\n            'Automatic transaction import',\n            'Investment account sync',\n            'Advanced automation',\n            'Tax optimization',\n            'Unlimited accounts'\n        ],\n        limits: {\n            users: 10,\n            accounts: 999,\n            transactions: 999999,\n            budgets: 999,\n            categories: 999\n        }\n    }\n};\nconst canAccessFeature = (currentTier, requiredTier)=>{\n    const tierOrder = [\n        'FREE',\n        'PLUS',\n        'PREMIUM'\n    ];\n    const currentIndex = tierOrder.indexOf(currentTier);\n    const requiredIndex = tierOrder.indexOf(requiredTier);\n    return currentIndex >= requiredIndex;\n};\nconst checkUsageLimit = (tier, resource, currentCount)=>{\n    const tierConfig = SUBSCRIPTION_TIERS[tier];\n    if (!tierConfig) return false;\n    const limit = tierConfig.limits[resource];\n    return currentCount < limit;\n};\nconst getUpgradeMessage = (currentTier, requiredTier)=>{\n    if (requiredTier === 'PLUS') {\n        return 'Upgrade to Plus ($2.99/month) to access this feature';\n    }\n    if (requiredTier === 'PREMIUM') {\n        return 'Upgrade to Premium ($9.99/month) to access this feature';\n    }\n    return 'Please upgrade to access this feature';\n};\nconst FEATURE_TIER_MAP = {\n    multiUser: 'PLUS',\n    ocrReceipts: 'PLUS',\n    prioritySync: 'PLUS',\n    enhancedInvestments: 'PLUS',\n    bankConnections: 'PREMIUM',\n    investmentSync: 'PREMIUM'\n};\nfunction useSubscription() {\n    var _session_user;\n    const { data: session } = (0,next_auth_react__WEBPACK_IMPORTED_MODULE_1__.useSession)();\n    const [subscription, setSubscription] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const fetchSubscriptionStatus = async ()=>{\n        var _session_user;\n        if (!(session === null || session === void 0 ? void 0 : (_session_user = session.user) === null || _session_user === void 0 ? void 0 : _session_user.email)) {\n            // Default to free tier for unauthenticated users\n            setSubscription({\n                tier: 'FREE',\n                tierName: 'Free',\n                price: 0,\n                features: SUBSCRIPTION_TIERS.FREE.features,\n                limits: SUBSCRIPTION_TIERS.FREE.limits,\n                isActive: true\n            });\n            setIsLoading(false);\n            return;\n        }\n        try {\n            setError(null);\n            // Check localStorage first for demo mode subscription overrides\n            const localSubscriptionKey = \"demo_subscription_\".concat(session.user.email);\n            const localSubscription = localStorage.getItem(localSubscriptionKey);\n            if (localSubscription) {\n                const parsedSubscription = JSON.parse(localSubscription);\n                console.log('Loading demo subscription from localStorage:', parsedSubscription);\n                setSubscription(parsedSubscription);\n                setIsLoading(false);\n                return;\n            }\n            const response = await fetch('/api/subscriptions/status');\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const data = await response.json();\n            setSubscription(data);\n        } catch (err) {\n            console.error('Failed to fetch subscription status:', err);\n            setError('Failed to load subscription status');\n            // Fallback to free tier\n            const fallbackSubscription = {\n                tier: 'FREE',\n                tierName: 'Free',\n                price: 0,\n                features: SUBSCRIPTION_TIERS.FREE.features,\n                limits: SUBSCRIPTION_TIERS.FREE.limits,\n                isActive: true\n            };\n            setSubscription(fallbackSubscription);\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useSubscription.useEffect\": ()=>{\n            fetchSubscriptionStatus();\n        }\n    }[\"useSubscription.useEffect\"], [\n        session === null || session === void 0 ? void 0 : (_session_user = session.user) === null || _session_user === void 0 ? void 0 : _session_user.email\n    ]);\n    const canAccess = (requiredTier)=>{\n        if (!subscription) return false;\n        return canAccessFeature(subscription.tier, requiredTier);\n    };\n    const canUseFeature = (feature)=>{\n        const requiredTier = FEATURE_TIER_MAP[feature];\n        return canAccess(requiredTier);\n    };\n    const canAddResource = (resource, currentCount)=>{\n        if (!subscription) return false;\n        return checkUsageLimit(subscription.tier, resource, currentCount);\n    };\n    const getResourceLimit = (resource)=>{\n        if (!subscription) return SUBSCRIPTION_TIERS.FREE.limits[resource];\n        return subscription.limits[resource];\n    };\n    const needsUpgrade = (requiredTier)=>{\n        return !canAccess(requiredTier);\n    };\n    const getUpgradeMessageForTier = (requiredTier)=>{\n        if (!subscription) return 'Please sign in to access this feature';\n        return getUpgradeMessage(subscription.tier, requiredTier);\n    };\n    const upgrade = async (tier)=>{\n        try {\n            const response = await fetch('/api/subscriptions/create-checkout', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    tier\n                })\n            });\n            if (response.ok) {\n                const { checkoutUrl } = await response.json();\n                window.location.href = checkoutUrl;\n            } else {\n                // Handle demo mode gracefully\n                try {\n                    const errorData = await response.json();\n                    if (errorData.isDemoMode) {\n                        console.log('Demo mode: Simulating upgrade to', tier);\n                        // Show notification about what would normally happen\n                        const confirmed = window.confirm(\"\\uD83D\\uDED2 Demo Mode Simulation\\n\\n\" + \"In a real environment, this would:\\n\" + \"• Redirect you to Stripe checkout\\n\" + \"• Process payment for \".concat(tier, \" ($\").concat(SUBSCRIPTION_TIERS[tier].price, \"/month)\\n\") + \"• Update your subscription\\n\\n\" + \"For this demo, we'll simulate the upgrade locally.\\n\\n\" + \"Proceed with demo upgrade to \".concat(tier, \"?\"));\n                        if (confirmed) {\n                            // Simulate the tier upgrade locally\n                            setSubscription({\n                                tier: tier,\n                                tierName: SUBSCRIPTION_TIERS[tier].name,\n                                price: SUBSCRIPTION_TIERS[tier].price,\n                                features: SUBSCRIPTION_TIERS[tier].features,\n                                limits: SUBSCRIPTION_TIERS[tier].limits,\n                                isActive: true\n                            });\n                            // Show success message\n                            alert(\"✅ Demo upgrade successful!\\n\\nYou are now on the \".concat(tier, \" plan ($\").concat(SUBSCRIPTION_TIERS[tier].price, \"/month).\\n\\nThis is a local simulation - no actual billing occurred.\"));\n                            return; // Success, don't throw error\n                        } else {\n                            throw new Error('Upgrade cancelled by user');\n                        }\n                    } else {\n                        throw new Error(errorData.error || 'Failed to create checkout session');\n                    }\n                } catch (parseError) {\n                    throw new Error(\"Demo Mode: Stripe not configured. Would upgrade to \".concat(tier, \" ($\").concat(SUBSCRIPTION_TIERS[tier].price, \"/month)\"));\n                }\n            }\n        } catch (err) {\n            console.error('Error starting upgrade:', err);\n            throw err;\n        }\n    };\n    const manageBilling = async ()=>{\n        try {\n            const response = await fetch('/api/subscriptions/create-portal', {\n                method: 'POST'\n            });\n            if (response.ok) {\n                const { portalUrl } = await response.json();\n                window.location.href = portalUrl;\n            } else {\n                // Handle demo mode gracefully\n                console.log('Demo mode: Billing management requested');\n                // Show demo billing management options\n                const options = \"Demo Billing Management\\n\\nAvailable options:\\n• Downgrade to Free (cancel subscription)\\n• View current plan details\\n• Simulate plan changes\";\n                if ((subscription === null || subscription === void 0 ? void 0 : subscription.tier) !== 'FREE') {\n                    const confirmed = window.confirm(\"\".concat(options, \"\\n\\nWould you like to downgrade to the Free plan?\\n\\n(This simulates canceling your subscription)\"));\n                    if (confirmed) {\n                        // Simulate downgrade to free\n                        setSubscription({\n                            tier: 'FREE',\n                            tierName: SUBSCRIPTION_TIERS.FREE.name,\n                            price: SUBSCRIPTION_TIERS.FREE.price,\n                            features: SUBSCRIPTION_TIERS.FREE.features,\n                            limits: SUBSCRIPTION_TIERS.FREE.limits,\n                            isActive: true\n                        });\n                        alert(\"✅ Demo downgrade successful!\\n\\nYou are now on the Free plan.\\n\\nThis is a local simulation - no actual billing changes occurred.\");\n                        return; // Success, don't throw error\n                    }\n                } else {\n                    alert('Demo Mode: You are already on the Free plan.\\n\\nIn a real environment, this would open the Stripe billing portal.');\n                }\n                throw new Error('Demo Mode: Billing portal simulation completed');\n            }\n        } catch (err) {\n            console.error('Error opening billing portal:', err);\n            throw err;\n        }\n    };\n    const refresh = async ()=>{\n        setIsLoading(true);\n        await fetchSubscriptionStatus();\n    };\n    return {\n        subscription,\n        isLoading,\n        error,\n        canAccess,\n        canUseFeature,\n        canAddResource,\n        getResourceLimit,\n        getUpgradeMessage: getUpgradeMessageForTier,\n        needsUpgrade,\n        refresh,\n        upgrade,\n        manageBilling\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2hvb2tzL3VzZVN1YnNjcmlwdGlvbi50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE0QztBQUNDO0FBRTdDLHlEQUF5RDtBQUN6RCxNQUFNRyxxQkFBcUI7SUFDekJDLE1BQU07UUFDSkMsTUFBTTtRQUNOQyxPQUFPO1FBQ1BDLFVBQVU7WUFDUjtZQUNBO1lBQ0E7WUFDQTtZQUNBO1NBQ0Q7UUFDREMsUUFBUTtZQUNOQyxPQUFPO1lBQ1BDLFVBQVU7WUFDVkMsY0FBYztZQUNkQyxTQUFTO1lBQ1RDLFlBQVk7UUFDZDtJQUNGO0lBQ0FDLE1BQU07UUFDSlQsTUFBTTtRQUNOQyxPQUFPO1FBQ1BDLFVBQVU7WUFDUjtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7U0FDRDtRQUNEQyxRQUFRO1lBQ05DLE9BQU87WUFDUEMsVUFBVTtZQUNWQyxjQUFjO1lBQ2RDLFNBQVM7WUFDVEMsWUFBWTtRQUNkO0lBQ0Y7SUFDQUUsU0FBUztRQUNQVixNQUFNO1FBQ05DLE9BQU87UUFDUEMsVUFBVTtZQUNSO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1NBQ0Q7UUFDREMsUUFBUTtZQUNOQyxPQUFPO1lBQ1BDLFVBQVU7WUFDVkMsY0FBYztZQUNkQyxTQUFTO1lBQ1RDLFlBQVk7UUFDZDtJQUNGO0FBQ0Y7QUFFQSxNQUFNRyxtQkFBbUIsQ0FBQ0MsYUFBcUJDO0lBQzdDLE1BQU1DLFlBQVk7UUFBQztRQUFRO1FBQVE7S0FBVTtJQUM3QyxNQUFNQyxlQUFlRCxVQUFVRSxPQUFPLENBQUNKO0lBQ3ZDLE1BQU1LLGdCQUFnQkgsVUFBVUUsT0FBTyxDQUFDSDtJQUN4QyxPQUFPRSxnQkFBZ0JFO0FBQ3pCO0FBRUEsTUFBTUMsa0JBQWtCLENBQUNDLE1BQWNDLFVBQWtCQztJQUN2RCxNQUFNQyxhQUFheEIsa0JBQWtCLENBQUNxQixLQUF3QztJQUM5RSxJQUFJLENBQUNHLFlBQVksT0FBTztJQUN4QixNQUFNQyxRQUFRRCxXQUFXbkIsTUFB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ekNnQixPQUFPQyxRQUFRLENBQUNDLElBQUksR0FBR1E7WUFDekIsT0FBTztnQkFDTCw4QkFBOEI7Z0JBQzlCakMsUUFBUUMsR0FBRyxDQUFDO2dCQUVaLHVDQUF1QztnQkFDdkMsTUFBTWlDLFVBQVc7Z0JBRWpCLElBQUlwRCxDQUFBQSx5QkFBQUEsbUNBQUFBLGFBQWNoQixJQUFJLE1BQUssUUFBUTtvQkFDakMsTUFBTThELFlBQVlMLE9BQU9NLE9BQU8sQ0FDOUIsR0FBVyxPQUFSSyxTQUFRO29CQUdiLElBQUlOLFdBQVc7d0JBQ2IsNkJBQTZCO3dCQUM3QjdDLGdCQUFnQjs0QkFDZGpCLE1BQU07NEJBQ055QixVQUFVOUMsbUJBQW1CQyxJQUFJLENBQUNDLElBQUk7NEJBQ3RDQyxPQUFPSCxtQkFBbUJDLElBQUksQ0FBQ0UsS0FBSzs0QkFDcENDLFVBQVVKLG1CQUFtQkMsSUFBSSxDQUFDRyxRQUFROzRCQUMxQ0MsUUFBUUwsbUJBQW1CQyxJQUFJLENBQUNJLE1BQU07NEJBQ3RDMEMsVUFBVTt3QkFDWjt3QkFFQXNDLE1BQU87d0JBQ1AsUUFBUSw2QkFBNkI7b0JBQ3ZDO2dCQUNGLE9BQU87b0JBQ0xBLE1BQU07Z0JBQ1I7Z0JBRUEsTUFBTSxJQUFJekIsTUFBTTtZQUNsQjtRQUNGLEVBQUUsT0FBT0csS0FBSztZQUNaUixRQUFRZCxLQUFLLENBQUMsaUNBQWlDc0I7WUFDL0MsTUFBTUE7UUFDUjtJQUNGO0lBRUEsTUFBTTJCLFVBQVU7UUFDZGxELGFBQWE7UUFDYixNQUFNRztJQUNSO0lBRUEsT0FBTztRQUNMTjtRQUNBRTtRQUNBRTtRQUNBd0I7UUFDQUM7UUFDQUU7UUFDQUM7UUFDQTNDLG1CQUFtQjZDO1FBQ25CRDtRQUNBb0I7UUFDQWxCO1FBQ0FlO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxuYXRoYVxcT25lRHJpdmVcXERlc2t0b3BcXE1vbmV5UXVlc3RWM1xccGFja2FnZXNcXHdlYnNpdGVcXGhvb2tzXFx1c2VTdWJzY3JpcHRpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVNlc3Npb24gfSBmcm9tICduZXh0LWF1dGgvcmVhY3QnO1xuXG4vLyBJbXBvcnQgdHlwZXMgYW5kIHV0aWxpdGllcyB3aXRob3V0IGluaXRpYWxpemluZyBTdHJpcGVcbmNvbnN0IFNVQlNDUklQVElPTl9USUVSUyA9IHtcbiAgRlJFRToge1xuICAgIG5hbWU6ICdGcmVlJyxcbiAgICBwcmljZTogMCxcbiAgICBmZWF0dXJlczogW1xuICAgICAgJ01hbnVhbCB0cmFuc2FjdGlvbiBlbnRyeScsXG4gICAgICAnQmFzaWMgYnVkZ2V0aW5nJyxcbiAgICAgICdMb2NhbCBkYXRhIHN0b3JhZ2UnLFxuICAgICAgJ1BERi9FeGNlbCByZXBvcnRzJyxcbiAgICAgICdVcCB0byAzIGFjY291bnRzJ1xuICAgIF0sXG4gICAgbGltaXRzOiB7XG4gICAgICB1c2VyczogMSxcbiAgICAgIGFjY291bnRzOiAzLFxuICAgICAgdHJhbnNhY3Rpb25zOiAxMDAwLFxuICAgICAgYnVkZ2V0czogNSxcbiAgICAgIGNhdGVnb3JpZXM6IDIwXG4gICAgfVxuICB9LFxuICBQTFVTOiB7XG4gICAgbmFtZTogJ1BsdXMnLFxuICAgIHByaWNlOiAyLjk5LFxuICAgIGZlYXR1cmVzOiBbXG4gICAgICAnRXZlcnl0aGluZyBpbiBGcmVlJyxcbiAgICAgICdNdWx0aS11c2VyIGNvbGxhYm9yYXRpb24nLFxuICAgICAgJ09DUiByZWNlaXB0IHByb2Nlc3NpbmcnLFxuICAgICAgJ0VuaGFuY2VkIGFuYWx5dGljcycsXG4gICAgICAnVXAgdG8gNSBhY2NvdW50cycsXG4gICAgICAnUHJpb3JpdHkgc3VwcG9ydCdcbiAgICBdLFxuICAgIGxpbWl0czoge1xuICAgICAgdXNlcnM6IDUsXG4gICAgICBhY2NvdW50czogNSxcbiAgICAgIHRyYW5zYWN0aW9uczogMTAwMDAsXG4gICAgICBidWRnZXRzOiAyMCxcbiAgICAgIGNhdGVnb3JpZXM6IDUwXG4gICAgfVxuICB9LFxuICBQUkVNSVVNOiB7XG4gICAgbmFtZTogJ1ByZW1pdW0nLFxuICAgIHByaWNlOiA5Ljk5LFxuICAgIGZlYXR1cmVzOiBbXG4gICAgICAnRXZlcnl0aGluZyBpbiBQbHVzJyxcbiAgICAgICdCYW5rIGFjY291bnQgY29ubmVjdGlvbnMnLFxuICAgICAgJ0F1dG9tYXRpYyB0cmFuc2FjdGlvbiBpbXBvcnQnLFxuICAgICAgJ0ludmVzdG1lbnQgYWNjb3VudCBzeW5jJyxcbiAgICAgICdBZHZhbmNlZCBhdXRvbWF0aW9uJyxcbiAgICAgICdUYXggb3B0aW1pemF0aW9uJyxcbiAgICAgICdVbmxpbWl0ZWQgYWNjb3VudHMnXG4gICAgXSxcbiAgICBsaW1pdHM6IHtcbiAgICAgIHVzZXJzOiAxMCxcbiAgICAgIGFjY291bnRzOiA5OTksXG4gICAgICB0cmFuc2FjdGlvbnM6IDk5OTk5OSxcbiAgICAgIGJ1ZGdldHM6IDk5OSxcbiAgICAgIGNhdGVnb3JpZXM6IDk5OVxuICAgIH1cbiAgfVxufSBhcyBjb25zdDtcblxuY29uc3QgY2FuQWNjZXNzRmVhdHVyZSA9IChjdXJyZW50VGllcjogc3RyaW5nLCByZXF1aXJlZFRpZXI6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xuICBjb25zdCB0aWVyT3JkZXIgPSBbJ0ZSRUUnLCAnUExVUycsICdQUkVNSVVNJ107XG4gIGNvbnN0IGN1cnJlbnRJbmRleCA9IHRpZXJPcmRlci5pbmRleE9mKGN1cnJlbnRUaWVyKTtcbiAgY29uc3QgcmVxdWlyZWRJbmRleCA9IHRpZXJPcmRlci5pbmRleE9mKHJlcXVpcmVkVGllcik7XG4gIHJldHVybiBjdXJyZW50SW5kZXggPj0gcmVxdWlyZWRJbmRleDtcbn07XG5cbmNvbnN0IGNoZWNrVXNhZ2VMaW1pdCA9ICh0aWVyOiBzdHJpbmcsIHJlc291cmNlOiBzdHJpbmcsIGN1cnJlbnRDb3VudDogbnVtYmVyKTogYm9vbGVhbiA9PiB7XG4gIGNvbnN0IHRpZXJDb25maWcgPSBTVUJTQ1JJUFRJT05fVElFUlNbdGllciBhcyBrZXlvZiB0eXBlb2YgU1VCU0NSSVBUSU9OX1RJRVJTXTtcbiAgaWYgKCF0aWVyQ29uZmlnKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IGxpbWl0ID0gdGllckNvbmZpZy5saW1pdHNbcmVzb3VyY2UgYXMga2V5b2YgdHlwZW9mIHRpZXJDb25maWcubGltaXRzXTtcbiAgcmV0dXJuIGN1cnJlbnRDb3VudCA8IGxpbWl0O1xufTtcblxuY29uc3QgZ2V0VXBncmFkZU1lc3NhZ2UgPSAoY3VycmVudFRpZXI6IHN0cmluZywgcmVxdWlyZWRUaWVyOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICBpZiAocmVxdWlyZWRUaWVyID09PSAnUExVUycpIHtcbiAgICByZXR1cm4gJ1VwZ3JhZGUgdG8gUGx1cyAoJDIuOTkvbW9udGgpIHRvIGFjY2VzcyB0aGlzIGZlYXR1cmUnO1xuICB9XG4gIGlmIChyZXF1aXJlZFRpZXIgPT09ICdQUkVNSVVNJykge1xuICAgIHJldHVybiAnVXBncmFkZSB0byBQcmVtaXVtICgkOS45OS9tb250aCkgdG8gYWNjZXNzIHRoaXMgZmVhdHVyZSc7XG4gIH1cbiAgcmV0dXJuICdQbGVhc2UgdXBncmFkZSB0byBhY2Nlc3MgdGhpcyBmZWF0dXJlJztcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3Vic2NyaXB0aW9uU3RhdHVzIHtcbiAgdGllcjogJ0ZSRUUnIHwgJ1BMVVMnIHwgJ1BSRU1JVU0nO1xuICB0aWVyTmFtZTogc3RyaW5nO1xuICBwcmljZTogbnVtYmVyO1xuICBmZWF0dXJlczogc3RyaW5nW107XG4gIGxpbWl0czoge1xuICAgIHVzZXJzOiBudW1iZXI7XG4gICAgYWNjb3VudHM6IG51bWJlcjtcbiAgICB0cmFuc2FjdGlvbnM6IG51bWJlcjtcbiAgICBidWRnZXRzOiBudW1iZXI7XG4gICAgY2F0ZWdvcmllczogbnVtYmVyO1xuICB9O1xuICBpc0FjdGl2ZTogYm9vbGVhbjtcbiAgc3RyaXBlU3Vic2NyaXB0aW9uPzoge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgc3RhdHVzOiBzdHJpbmc7XG4gICAgY3VycmVudFBlcmlvZFN0YXJ0OiBEYXRlO1xuICAgIGN1cnJlbnRQZXJpb2RFbmQ6IERhdGU7XG4gICAgY2FuY2VsQXRQZXJpb2RFbmQ6IGJvb2xlYW47XG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlU3Vic2NyaXB0aW9uUmV0dXJuIHtcbiAgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb25TdGF0dXMgfCBudWxsO1xuICBpc0xvYWRpbmc6IGJvb2xlYW47XG4gIGVycm9yOiBzdHJpbmcgfCBudWxsO1xuXG4gIC8vIEZlYXR1cmUgYWNjZXNzIGNoZWNrc1xuICBjYW5BY2Nlc3M6IChyZXF1aXJlZFRpZXI6ICdGUkVFJyB8ICdQTFVTJyB8ICdQUkVNSVVNJykgPT4gYm9vbGVhbjtcbiAgY2FuVXNlRmVhdHVyZTogKGZlYXR1cmU6ICdtdWx0aVVzZXInIHwgJ29jclJlY2VpcHRzJyB8ICdwcmlvcml0eVN5bmMnIHwgJ2VuaGFuY2VkSW52ZXN0bWVudHMnIHwgJ2JhbmtDb25uZWN0aW9ucycgfCAnaW52ZXN0bWVudFN5bmMnKSA9PiBib29sZWFuO1xuXG4gIC8vIFVzYWdlIGxpbWl0IGNoZWNrc1xuICBjYW5BZGRSZXNvdXJjZTogKHJlc291cmNlOiAndXNlcnMnIHwgJ2FjY291bnRzJyB8ICdidWRnZXRzJyB8ICdjYXRlZ29yaWVzJywgY3VycmVudENvdW50OiBudW1iZXIpID0+IGJvb2xlYW47XG4gIGdldFJlc291cmNlTGltaXQ6IChyZXNvdXJjZTogJ3VzZXJzJyB8ICdhY2NvdW50cycgfCAnYnVkZ2V0cycgfCAnY2F0ZWdvcmllcycpID0+IG51bWJlcjtcblxuICAvLyBVcGdyYWRlIGhlbHBlcnNcbiAgZ2V0VXBncmFkZU1lc3NhZ2U6IChyZXF1aXJlZFRpZXI6ICdGUkVFJyB8ICdQTFVTJyB8ICdQUkVNSVVNJykgPT4gc3RyaW5nO1xuICBuZWVkc1VwZ3JhZGU6IChyZXF1aXJlZFRpZXI6ICdGUkVFJyB8ICdQTFVTJyB8ICdQUkVNSVVNJykgPT4gYm9vbGVhbjtcblxuICAvLyBBY3Rpb25zXG4gIHJlZnJlc2g6ICgpID0+IFByb21pc2U8dm9pZD47XG4gIHVwZ3JhZGU6ICh0aWVyOiAnUExVUycgfCAnUFJFTUlVTScpID0+IFByb21pc2U8dm9pZD47XG4gIG1hbmFnZUJpbGxpbmc6ICgpID0+IFByb21pc2U8dm9pZD47XG59XG5cbmNvbnN0IEZFQVRVUkVfVElFUl9NQVAgPSB7XG4gIG11bHRpVXNlcjogJ1BMVVMnLFxuICBvY3JSZWNlaXB0czogJ1BMVVMnLFxuICBwcmlvcml0eVN5bmM6ICdQTFVTJyxcbiAgZW5oYW5jZWRJbnZlc3RtZW50czogJ1BMVVMnLFxuICBiYW5rQ29ubmVjdGlvbnM6ICdQUkVNSVVNJyxcbiAgaW52ZXN0bWVudFN5bmM6ICdQUkVNSVVNJyxcbn0gYXMgY29uc3Q7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VTdWJzY3JpcHRpb24oKTogVXNlU3Vic2NyaXB0aW9uUmV0dXJuIHtcbiAgY29uc3QgeyBkYXRhOiBzZXNzaW9uIH0gPSB1c2VTZXNzaW9uKCk7XG4gIGNvbnN0IFtzdWJzY3JpcHRpb24sIHNldFN1YnNjcmlwdGlvbl0gPSB1c2VTdGF0ZTxTdWJzY3JpcHRpb25TdGF0dXMgfCBudWxsPihudWxsKTtcbiAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpO1xuICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xuXG4gIGNvbnN0IGZldGNoU3Vic2NyaXB0aW9uU3RhdHVzID0gYXN5bmMgKCkgPT4ge1xuICAgIGlmICghc2Vzc2lvbj8udXNlcj8uZW1haWwpIHtcbiAgICAgIC8vIERlZmF1bHQgdG8gZnJlZSB0aWVyIGZvciB1bmF1dGhlbnRpY2F0ZWQgdXNlcnNcbiAgICAgIHNldFN1YnNjcmlwdGlvbih7XG4gICAgICAgIHRpZXI6ICdGUkVFJyxcbiAgICAgICAgdGllck5hbWU6ICdGcmVlJyxcbiAgICAgICAgcHJpY2U6IDAsXG4gICAgICAgIGZlYXR1cmVzOiBTVUJTQ1JJUFRJT05fVElFUlMuRlJFRS5mZWF0dXJlcyxcbiAgICAgICAgbGltaXRzOiBTVUJTQ1JJUFRJT05fVElFUlMuRlJFRS5saW1pdHMsXG4gICAgICAgIGlzQWN0aXZlOiB0cnVlLFxuICAgICAgfSk7XG4gICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBzZXRFcnJvcihudWxsKTtcblxuICAgICAgLy8gQ2hlY2sgbG9jYWxTdG9yYWdlIGZpcnN0IGZvciBkZW1vIG1vZGUgc3Vic2NyaXB0aW9uIG92ZXJyaWRlc1xuICAgICAgY29uc3QgbG9jYWxTdWJzY3JpcHRpb25LZXkgPSBgZGVtb19zdWJzY3JpcHRpb25fJHtzZXNzaW9uLnVzZXIuZW1haWx9YDtcbiAgICAgIGNvbnN0IGxvY2FsU3Vic2NyaXB0aW9uID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0obG9jYWxTdWJzY3JpcHRpb25LZXkpO1xuXG4gICAgICBpZiAobG9jYWxTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgY29uc3QgcGFyc2VkU3Vic2NyaXB0aW9uID0gSlNPTi5wYXJzZShsb2NhbFN1YnNjcmlwdGlvbik7XG4gICAgICAgIGNvbnNvbGUubG9nKCdMb2FkaW5nIGRlbW8gc3Vic2NyaXB0aW9uIGZyb20gbG9jYWxTdG9yYWdlOicsIHBhcnNlZFN1YnNjcmlwdGlvbik7XG4gICAgICAgIHNldFN1YnNjcmlwdGlvbihwYXJzZWRTdWJzY3JpcHRpb24pO1xuICAgICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvc3Vic2NyaXB0aW9ucy9zdGF0dXMnKTtcblxuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEhUVFAgZXJyb3IhIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICBzZXRTdWJzY3JpcHRpb24oZGF0YSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggc3Vic2NyaXB0aW9uIHN0YXR1czonLCBlcnIpO1xuICAgICAgc2V0RXJyb3IoJ0ZhaWxlZCB0byBsb2FkIHN1YnNjcmlwdGlvbiBzdGF0dXMnKTtcblxuICAgICAgLy8gRmFsbGJhY2sgdG8gZnJlZSB0aWVyXG4gICAgICBjb25zdCBmYWxsYmFja1N1YnNjcmlwdGlvbiA9IHtcbiAgICAgICAgdGllcjogJ0ZSRUUnLFxuICAgICAgICB0aWVyTmFtZTogJ0ZyZWUnLFxuICAgICAgICBwcmljZTogMCxcbiAgICAgICAgZmVhdHVyZXM6IFNVQlNDUklQVElPTl9USUVSUy5GUkVFLmZlYXR1cmVzLFxuICAgICAgICBsaW1pdHM6IFNVQlNDUklQVElPTl9USUVSUy5GUkVFLmxpbWl0cyxcbiAgICAgICAgaXNBY3RpdmU6IHRydWUsXG4gICAgICB9O1xuICAgICAgc2V0U3Vic2NyaXB0aW9uKGZhbGxiYWNrU3Vic2NyaXB0aW9uKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgICB9XG4gIH07XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBmZXRjaFN1YnNjcmlwdGlvblN0YXR1cygpO1xuICB9LCBbc2Vzc2lvbj8udXNlcj8uZW1haWxdKTtcblxuICBjb25zdCBjYW5BY2Nlc3MgPSAocmVxdWlyZWRUaWVyOiAnRlJFRScgfCAnUExVUycgfCAnUFJFTUlVTScpOiBib29sZWFuID0+IHtcbiAgICBpZiAoIXN1YnNjcmlwdGlvbikgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBjYW5BY2Nlc3NGZWF0dXJlKHN1YnNjcmlwdGlvbi50aWVyLCByZXF1aXJlZFRpZXIpO1xuICB9O1xuXG4gIGNvbnN0IGNhblVzZUZlYXR1cmUgPSAoZmVhdHVyZToga2V5b2YgdHlwZW9mIEZFQVRVUkVfVElFUl9NQVApOiBib29sZWFuID0+IHtcbiAgICBjb25zdCByZXF1aXJlZFRpZXIgPSBGRUFUVVJFX1RJRVJfTUFQW2ZlYXR1cmVdO1xuICAgIHJldHVybiBjYW5BY2Nlc3MocmVxdWlyZWRUaWVyKTtcbiAgfTtcblxuICBjb25zdCBjYW5BZGRSZXNvdXJjZSA9IChyZXNvdXJjZTogJ3VzZXJzJyB8ICdhY2NvdW50cycgfCAnYnVkZ2V0cycgfCAnY2F0ZWdvcmllcycsIGN1cnJlbnRDb3VudDogbnVtYmVyKTogYm9vbGVhbiA9PiB7XG4gICAgaWYgKCFzdWJzY3JpcHRpb24pIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gY2hlY2tVc2FnZUxpbWl0KHN1YnNjcmlwdGlvbi50aWVyLCByZXNvdXJjZSwgY3VycmVudENvdW50KTtcbiAgfTtcblxuICBjb25zdCBnZXRSZXNvdXJjZUxpbWl0ID0gKHJlc291cmNlOiAndXNlcnMnIHwgJ2FjY291bnRzJyB8ICdidWRnZXRzJyB8ICdjYXRlZ29yaWVzJyk6IG51bWJlciA9PiB7XG4gICAgaWYgKCFzdWJzY3JpcHRpb24pIHJldHVybiBTVUJTQ1JJUFRJT05fVElFUlMuRlJFRS5saW1pdHNbcmVzb3VyY2VdO1xuICAgIHJldHVybiBzdWJzY3JpcHRpb24ubGltaXRzW3Jlc291cmNlXTtcbiAgfTtcblxuICBjb25zdCBuZWVkc1VwZ3JhZGUgPSAocmVxdWlyZWRUaWVyOiAnRlJFRScgfCAnUExVUycgfCAnUFJFTUlVTScpOiBib29sZWFuID0+IHtcbiAgICByZXR1cm4gIWNhbkFjY2VzcyhyZXF1aXJlZFRpZXIpO1xuICB9O1xuXG4gIGNvbnN0IGdldFVwZ3JhZGVNZXNzYWdlRm9yVGllciA9IChyZXF1aXJlZFRpZXI6ICdGUkVFJyB8ICdQTFVTJyB8ICdQUkVNSVVNJyk6IHN0cmluZyA9PiB7XG4gICAgaWYgKCFzdWJzY3JpcHRpb24pIHJldHVybiAnUGxlYXNlIHNpZ24gaW4gdG8gYWNjZXNzIHRoaXMgZmVhdHVyZSc7XG4gICAgcmV0dXJuIGdldFVwZ3JhZGVNZXNzYWdlKHN1YnNjcmlwdGlvbi50aWVyLCByZXF1aXJlZFRpZXIpO1xuICB9O1xuXG4gIGNvbnN0IHVwZ3JhZGUgPSBhc3luYyAodGllcjogJ1BMVVMnIHwgJ1BSRU1JVU0nKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvc3Vic2NyaXB0aW9ucy9jcmVhdGUtY2hlY2tvdXQnLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyB0aWVyIH0pLFxuICAgICAgfSk7XG5cbiAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICBjb25zdCB7IGNoZWNrb3V0VXJsIH0gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gY2hlY2tvdXRVcmw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBIYW5kbGUgZGVtbyBtb2RlIGdyYWNlZnVsbHlcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBlcnJvckRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgaWYgKGVycm9yRGF0YS5pc0RlbW9Nb2RlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRGVtbyBtb2RlOiBTaW11bGF0aW5nIHVwZ3JhZGUgdG8nLCB0aWVyKTtcblxuICAgICAgICAgICAgLy8gU2hvdyBub3RpZmljYXRpb24gYWJvdXQgd2hhdCB3b3VsZCBub3JtYWxseSBoYXBwZW5cbiAgICAgICAgICAgIGNvbnN0IGNvbmZpcm1lZCA9IHdpbmRvdy5jb25maXJtKFxuICAgICAgICAgICAgICBg8J+bkiBEZW1vIE1vZGUgU2ltdWxhdGlvblxcblxcbmAgK1xuICAgICAgICAgICAgICBgSW4gYSByZWFsIGVudmlyb25tZW50LCB0aGlzIHdvdWxkOlxcbmAgK1xuICAgICAgICAgICAgICBg4oCiIFJlZGlyZWN0IHlvdSB0byBTdHJpcGUgY2hlY2tvdXRcXG5gICtcbiAgICAgICAgICAgICAgYOKAoiBQcm9jZXNzIHBheW1lbnQgZm9yICR7dGllcn0gKCQke1NVQlNDUklQVElPTl9USUVSU1t0aWVyXS5wcmljZX0vbW9udGgpXFxuYCArXG4gICAgICAgICAgICAgIGDigKIgVXBkYXRlIHlvdXIgc3Vic2NyaXB0aW9uXFxuXFxuYCArXG4gICAgICAgICAgICAgIGBGb3IgdGhpcyBkZW1vLCB3ZSdsbCBzaW11bGF0ZSB0aGUgdXBncmFkZSBsb2NhbGx5LlxcblxcbmAgK1xuICAgICAgICAgICAgICBgUHJvY2VlZCB3aXRoIGRlbW8gdXBncmFkZSB0byAke3RpZXJ9P2BcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGlmIChjb25maXJtZWQpIHtcbiAgICAgICAgICAgICAgLy8gU2ltdWxhdGUgdGhlIHRpZXIgdXBncmFkZSBsb2NhbGx5XG4gICAgICAgICAgICAgIHNldFN1YnNjcmlwdGlvbih7XG4gICAgICAgICAgICAgICAgdGllcjogdGllcixcbiAgICAgICAgICAgICAgICB0aWVyTmFtZTogU1VCU0NSSVBUSU9OX1RJRVJTW3RpZXJdLm5hbWUsXG4gICAgICAgICAgICAgICAgcHJpY2U6IFNVQlNDUklQVElPTl9USUVSU1t0aWVyXS5wcmljZSxcbiAgICAgICAgICAgICAgICBmZWF0dXJlczogU1VCU0NSSVBUSU9OX1RJRVJTW3RpZXJdLmZlYXR1cmVzLFxuICAgICAgICAgICAgICAgIGxpbWl0czogU1VCU0NSSVBUSU9OX1RJRVJTW3RpZXJdLmxpbWl0cyxcbiAgICAgICAgICAgICAgICBpc0FjdGl2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgLy8gU2hvdyBzdWNjZXNzIG1lc3NhZ2VcbiAgICAgICAgICAgICAgYWxlcnQoYOKchSBEZW1vIHVwZ3JhZGUgc3VjY2Vzc2Z1bCFcXG5cXG5Zb3UgYXJlIG5vdyBvbiB0aGUgJHt0aWVyfSBwbGFuICgkJHtTVUJTQ1JJUFRJT05fVElFUlNbdGllcl0ucHJpY2V9L21vbnRoKS5cXG5cXG5UaGlzIGlzIGEgbG9jYWwgc2ltdWxhdGlvbiAtIG5vIGFjdHVhbCBiaWxsaW5nIG9jY3VycmVkLmApO1xuICAgICAgICAgICAgICByZXR1cm47IC8vIFN1Y2Nlc3MsIGRvbid0IHRocm93IGVycm9yXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VwZ3JhZGUgY2FuY2VsbGVkIGJ5IHVzZXInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yRGF0YS5lcnJvciB8fCAnRmFpbGVkIHRvIGNyZWF0ZSBjaGVja291dCBzZXNzaW9uJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChwYXJzZUVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBEZW1vIE1vZGU6IFN0cmlwZSBub3QgY29uZmlndXJlZC4gV291bGQgdXBncmFkZSB0byAke3RpZXJ9ICgkJHtTVUJTQ1JJUFRJT05fVElFUlNbdGllcl0ucHJpY2V9L21vbnRoKWApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBzdGFydGluZyB1cGdyYWRlOicsIGVycik7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IG1hbmFnZUJpbGxpbmcgPSBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvc3Vic2NyaXB0aW9ucy9jcmVhdGUtcG9ydGFsJywge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIH0pO1xuXG4gICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgY29uc3QgeyBwb3J0YWxVcmwgfSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBwb3J0YWxVcmw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBIYW5kbGUgZGVtbyBtb2RlIGdyYWNlZnVsbHlcbiAgICAgICAgY29uc29sZS5sb2coJ0RlbW8gbW9kZTogQmlsbGluZyBtYW5hZ2VtZW50IHJlcXVlc3RlZCcpO1xuXG4gICAgICAgIC8vIFNob3cgZGVtbyBiaWxsaW5nIG1hbmFnZW1lbnQgb3B0aW9uc1xuICAgICAgICBjb25zdCBvcHRpb25zID0gYERlbW8gQmlsbGluZyBNYW5hZ2VtZW50XFxuXFxuQXZhaWxhYmxlIG9wdGlvbnM6XFxu4oCiIERvd25ncmFkZSB0byBGcmVlIChjYW5jZWwgc3Vic2NyaXB0aW9uKVxcbuKAoiBWaWV3IGN1cnJlbnQgcGxhbiBkZXRhaWxzXFxu4oCiIFNpbXVsYXRlIHBsYW4gY2hhbmdlc2A7XG5cbiAgICAgICAgaWYgKHN1YnNjcmlwdGlvbj8udGllciAhPT0gJ0ZSRUUnKSB7XG4gICAgICAgICAgY29uc3QgY29uZmlybWVkID0gd2luZG93LmNvbmZpcm0oXG4gICAgICAgICAgICBgJHtvcHRpb25zfVxcblxcbldvdWxkIHlvdSBsaWtlIHRvIGRvd25ncmFkZSB0byB0aGUgRnJlZSBwbGFuP1xcblxcbihUaGlzIHNpbXVsYXRlcyBjYW5jZWxpbmcgeW91ciBzdWJzY3JpcHRpb24pYFxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBpZiAoY29uZmlybWVkKSB7XG4gICAgICAgICAgICAvLyBTaW11bGF0ZSBkb3duZ3JhZGUgdG8gZnJlZVxuICAgICAgICAgICAgc2V0U3Vic2NyaXB0aW9uKHtcbiAgICAgICAgICAgICAgdGllcjogJ0ZSRUUnLFxuICAgICAgICAgICAgICB0aWVyTmFtZTogU1VCU0NSSVBUSU9OX1RJRVJTLkZSRUUubmFtZSxcbiAgICAgICAgICAgICAgcHJpY2U6IFNVQlNDUklQVElPTl9USUVSUy5GUkVFLnByaWNlLFxuICAgICAgICAgICAgICBmZWF0dXJlczogU1VCU0NSSVBUSU9OX1RJRVJTLkZSRUUuZmVhdHVyZXMsXG4gICAgICAgICAgICAgIGxpbWl0czogU1VCU0NSSVBUSU9OX1RJRVJTLkZSRUUubGltaXRzLFxuICAgICAgICAgICAgICBpc0FjdGl2ZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBhbGVydChg4pyFIERlbW8gZG93bmdyYWRlIHN1Y2Nlc3NmdWwhXFxuXFxuWW91IGFyZSBub3cgb24gdGhlIEZyZWUgcGxhbi5cXG5cXG5UaGlzIGlzIGEgbG9jYWwgc2ltdWxhdGlvbiAtIG5vIGFjdHVhbCBiaWxsaW5nIGNoYW5nZXMgb2NjdXJyZWQuYCk7XG4gICAgICAgICAgICByZXR1cm47IC8vIFN1Y2Nlc3MsIGRvbid0IHRocm93IGVycm9yXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFsZXJ0KCdEZW1vIE1vZGU6IFlvdSBhcmUgYWxyZWFkeSBvbiB0aGUgRnJlZSBwbGFuLlxcblxcbkluIGEgcmVhbCBlbnZpcm9ubWVudCwgdGhpcyB3b3VsZCBvcGVuIHRoZSBTdHJpcGUgYmlsbGluZyBwb3J0YWwuJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RlbW8gTW9kZTogQmlsbGluZyBwb3J0YWwgc2ltdWxhdGlvbiBjb21wbGV0ZWQnKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIG9wZW5pbmcgYmlsbGluZyBwb3J0YWw6JywgZXJyKTtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgcmVmcmVzaCA9IGFzeW5jICgpID0+IHtcbiAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XG4gICAgYXdhaXQgZmV0Y2hTdWJzY3JpcHRpb25TdGF0dXMoKTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHN1YnNjcmlwdGlvbixcbiAgICBpc0xvYWRpbmcsXG4gICAgZXJyb3IsXG4gICAgY2FuQWNjZXNzLFxuICAgIGNhblVzZUZlYXR1cmUsXG4gICAgY2FuQWRkUmVzb3VyY2UsXG4gICAgZ2V0UmVzb3VyY2VMaW1pdCxcbiAgICBnZXRVcGdyYWRlTWVzc2FnZTogZ2V0VXBncmFkZU1lc3NhZ2VGb3JUaWVyLFxuICAgIG5lZWRzVXBncmFkZSxcbiAgICByZWZyZXNoLFxuICAgIHVwZ3JhZGUsXG4gICAgbWFuYWdlQmlsbGluZyxcbiAgfTtcbn0iXSwibmFtZXMiOlsidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJ1c2VTZXNzaW9uIiwiU1VCU0NSSVBUSU9OX1RJRVJTIiwiRlJFRSIsIm5hbWUiLCJwcmljZSIsImZlYXR1cmVzIiwibGltaXRzIiwidXNlcnMiLCJhY2NvdW50cyIsInRyYW5zYWN0aW9ucyIsImJ1ZGdldHMiLCJjYXRlZ29yaWVzIiwiUExVUyIsIlBSRU1JVU0iLCJjYW5BY2Nlc3NGZWF0dXJlIiwiY3VycmVudFRpZXIiLCJyZXF1aXJlZFRpZXIiLCJ0aWVyT3JkZXIiLCJjdXJyZW50SW5kZXgiLCJpbmRleE9mIiwicmVxdWlyZWRJbmRleCIsImNoZWNrVXNhZ2VMaW1pdCIsInRpZXIiLCJyZXNvdXJjZSIsImN1cnJlbnRDb3VudCIsInRpZXJDb25maWciLCJsaW1pdCIsImdldFVwZ3JhZGVNZXNzYWdlIiwiRkVBVFVSRV9USUVSX01BUCIsIm11bHRpVXNlciIsIm9jclJlY2VpcHRzIiwicHJpb3JpdHlTeW5jIiwiZW5oYW5jZWRJbnZlc3RtZW50cyIsImJhbmtDb25uZWN0aW9ucyIsImludmVzdG1lbnRTeW5jIiwidXNlU3Vic2NyaXB0aW9uIiwic2Vzc2lvbiIsImRhdGEiLCJzdWJzY3JpcHRpb24iLCJzZXRTdWJzY3JpcHRpb24iLCJpc0xvYWRpbmciLCJzZXRJc0xvYWRpbmciLCJlcnJvciIsInNldEVycm9yIiwiZmV0Y2hTdWJzY3JpcHRpb25TdGF0dXMiLCJ1c2VyIiwiZW1haWwiLCJ0aWVyTmFtZSIsImlzQWN0aXZlIiwibG9jYWxTdWJzY3JpcHRpb25LZXkiLCJsb2NhbFN1YnNjcmlwdGlvbiIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJwYXJzZWRTdWJzY3JpcHRpb24iLCJKU09OIiwicGFyc2UiLCJjb25zb2xlIiwibG9nIiwicmVzcG9uc2UiLCJmZXRjaCIsIm9rIiwiRXJyb3IiLCJzdGF0dXMiLCJqc29uIiwiZXJyIiwiZmFsbGJhY2tTdWJzY3JpcHRpb24iLCJjYW5BY2Nlc3MiLCJjYW5Vc2VGZWF0dXJlIiwiZmVhdHVyZSIsImNhbkFkZFJlc291cmNlIiwiZ2V0UmVzb3VyY2VMaW1pdCIsIm5lZWRzVXBncmFkZSIsImdldFVwZ3JhZGVNZXNzYWdlRm9yVGllciIsInVwZ3JhZGUiLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsInN0cmluZ2lmeSIsImNoZWNrb3V0VXJsIiwid2luZG93IiwibG9jYXRpb24iLCJocmVmIiwiZXJyb3JEYXRhIiwiaXNEZW1vTW9kZSIsImNvbmZpcm1lZCIsImNvbmZpcm0iLCJhbGVydCIsInBhcnNlRXJyb3IiLCJtYW5hZ2VCaWxsaW5nIiwicG9ydGFsVXJsIiwib3B0aW9ucyIsInJlZnJlc2giXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/useSubscription.ts\n"));

/***/ })

});