"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/investments/page",{

/***/ "(app-pages-browser)/./hooks/useSubscription.ts":
/*!**********************************!*\
  !*** ./hooks/useSubscription.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSubscription: () => (/* binding */ useSubscription)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../../node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_auth_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth/react */ \"(app-pages-browser)/../../node_modules/next-auth/react/index.js\");\n/* harmony import */ var next_auth_react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_auth_react__WEBPACK_IMPORTED_MODULE_1__);\n\n\n// Import types and utilities without initializing Stripe\nconst SUBSCRIPTION_TIERS = {\n    FREE: {\n        name: 'Free',\n        price: 0,\n        features: [\n            'Manual transaction entry',\n            'Basic budgeting',\n            'Local data storage',\n            'PDF/Excel reports',\n            'Up to 3 accounts'\n        ],\n        limits: {\n            users: 1,\n            accounts: 3,\n            transactions: 1000,\n            budgets: 5,\n            categories: 20\n        }\n    },\n    PLUS: {\n        name: 'Plus',\n        price: 2.99,\n        features: [\n            'Everything in Free',\n            'Multi-user collaboration',\n            'OCR receipt processing',\n            'Enhanced analytics',\n            'Up to 5 accounts',\n            'Priority support'\n        ],\n        limits: {\n            users: 5,\n            accounts: 5,\n            transactions: 10000,\n            budgets: 20,\n            categories: 50\n        }\n    },\n    PREMIUM: {\n        name: 'Premium',\n        price: 9.99,\n        features: [\n            'Everything in Plus',\n            'Bank account connections',\n            'Automatic transaction import',\n            'Investment account sync',\n            'Advanced automation',\n            'Tax optimization',\n            'Unlimited accounts'\n        ],\n        limits: {\n            users: 10,\n            accounts: 999,\n            transactions: 999999,\n            budgets: 999,\n            categories: 999\n        }\n    }\n};\nconst canAccessFeature = (currentTier, requiredTier)=>{\n    const tierOrder = [\n        'FREE',\n        'PLUS',\n        'PREMIUM'\n    ];\n    const currentIndex = tierOrder.indexOf(currentTier);\n    const requiredIndex = tierOrder.indexOf(requiredTier);\n    return currentIndex >= requiredIndex;\n};\nconst checkUsageLimit = (tier, resource, currentCount)=>{\n    const tierConfig = SUBSCRIPTION_TIERS[tier];\n    if (!tierConfig) return false;\n    const limit = tierConfig.limits[resource];\n    return currentCount < limit;\n};\nconst getUpgradeMessage = (currentTier, requiredTier)=>{\n    if (requiredTier === 'PLUS') {\n        return 'Upgrade to Plus ($2.99/month) to access this feature';\n    }\n    if (requiredTier === 'PREMIUM') {\n        return 'Upgrade to Premium ($9.99/month) to access this feature';\n    }\n    return 'Please upgrade to access this feature';\n};\nconst FEATURE_TIER_MAP = {\n    multiUser: 'PLUS',\n    ocrReceipts: 'PLUS',\n    prioritySync: 'PLUS',\n    enhancedInvestments: 'PLUS',\n    bankConnections: 'PREMIUM',\n    investmentSync: 'PREMIUM'\n};\nfunction useSubscription() {\n    var _session_user;\n    const { data: session } = (0,next_auth_react__WEBPACK_IMPORTED_MODULE_1__.useSession)();\n    const [subscription, setSubscription] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const fetchSubscriptionStatus = async ()=>{\n        var _session_user;\n        if (!(session === null || session === void 0 ? void 0 : (_session_user = session.user) === null || _session_user === void 0 ? void 0 : _session_user.email)) {\n            // Default to free tier for unauthenticated users\n            setSubscription({\n                tier: 'FREE',\n                tierName: 'Free',\n                price: 0,\n                features: SUBSCRIPTION_TIERS.FREE.features,\n                limits: SUBSCRIPTION_TIERS.FREE.limits,\n                isActive: true\n            });\n            setIsLoading(false);\n            return;\n        }\n        try {\n            setError(null);\n            // Check localStorage first for demo mode subscription overrides\n            const localSubscriptionKey = \"demo_subscription_\".concat(session.user.email);\n            const localSubscription = localStorage.getItem(localSubscriptionKey);\n            if (localSubscription) {\n                const parsedSubscription = JSON.parse(localSubscription);\n                console.log('Loading demo subscription from localStorage:', parsedSubscription);\n                setSubscription(parsedSubscription);\n                setIsLoading(false);\n                return;\n            }\n            const response = await fetch('/api/subscriptions/status');\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const data = await response.json();\n            setSubscription(data);\n        } catch (err) {\n            console.error('Failed to fetch subscription status:', err);\n            setError('Failed to load subscription status');\n            // Fallback to free tier\n            const fallbackSubscription = {\n                tier: 'FREE',\n                tierName: 'Free',\n                price: 0,\n                features: SUBSCRIPTION_TIERS.FREE.features,\n                limits: SUBSCRIPTION_TIERS.FREE.limits,\n                isActive: true\n            };\n            setSubscription(fallbackSubscription);\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useSubscription.useEffect\": ()=>{\n            fetchSubscriptionStatus();\n        }\n    }[\"useSubscription.useEffect\"], [\n        session === null || session === void 0 ? void 0 : (_session_user = session.user) === null || _session_user === void 0 ? void 0 : _session_user.email\n    ]);\n    const canAccess = (requiredTier)=>{\n        if (!subscription) return false;\n        return canAccessFeature(subscription.tier, requiredTier);\n    };\n    const canUseFeature = (feature)=>{\n        const requiredTier = FEATURE_TIER_MAP[feature];\n        return canAccess(requiredTier);\n    };\n    const canAddResource = (resource, currentCount)=>{\n        if (!subscription) return false;\n        return checkUsageLimit(subscription.tier, resource, currentCount);\n    };\n    const getResourceLimit = (resource)=>{\n        if (!subscription) return SUBSCRIPTION_TIERS.FREE.limits[resource];\n        return subscription.limits[resource];\n    };\n    const needsUpgrade = (requiredTier)=>{\n        return !canAccess(requiredTier);\n    };\n    const getUpgradeMessageForTier = (requiredTier)=>{\n        if (!subscription) return 'Please sign in to access this feature';\n        return getUpgradeMessage(subscription.tier, requiredTier);\n    };\n    const upgrade = async (tier)=>{\n        try {\n            const response = await fetch('/api/subscriptions/create-checkout', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    tier\n                })\n            });\n            if (response.ok) {\n                const { checkoutUrl } = await response.json();\n                window.location.href = checkoutUrl;\n            } else {\n                // Handle demo mode gracefully\n                try {\n                    const errorData = await response.json();\n                    if (errorData.isDemoMode) {\n                        console.log('Demo mode: Simulating upgrade to', tier);\n                        // Show notification about what would normally happen\n                        const confirmed = window.confirm(\"\\uD83D\\uDED2 Demo Mode Simulation\\n\\n\" + \"In a real environment, this would:\\n\" + \"• Redirect you to Stripe checkout\\n\" + \"• Process payment for \".concat(tier, \" ($\").concat(SUBSCRIPTION_TIERS[tier].price, \"/month)\\n\") + \"• Update your subscription\\n\\n\" + \"For this demo, we'll simulate the upgrade locally.\\n\\n\" + \"Proceed with demo upgrade to \".concat(tier, \"?\"));\n                        if (confirmed) {\n                            var _session_user;\n                            // Simulate the tier upgrade locally\n                            const newSubscription = {\n                                tier: tier,\n                                tierName: SUBSCRIPTION_TIERS[tier].name,\n                                price: SUBSCRIPTION_TIERS[tier].price,\n                                features: SUBSCRIPTION_TIERS[tier].features,\n                                limits: SUBSCRIPTION_TIERS[tier].limits,\n                                isActive: true\n                            };\n                            setSubscription(newSubscription);\n                            // Save to localStorage for persistence across navigation\n                            if (session === null || session === void 0 ? void 0 : (_session_user = session.user) === null || _session_user === void 0 ? void 0 : _session_user.email) {\n                                const localSubscriptionKey = \"demo_subscription_\".concat(session.user.email);\n                                localStorage.setItem(localSubscriptionKey, JSON.stringify(newSubscription));\n                                console.log('Saved demo subscription to localStorage:', newSubscription);\n                            }\n                            // Show success message\n                            alert(\"✅ Demo upgrade successful!\\n\\nYou are now on the \".concat(tier, \" plan ($\").concat(SUBSCRIPTION_TIERS[tier].price, \"/month).\\n\\nThis is a local simulation - no actual billing occurred.\"));\n                            return; // Success, don't throw error\n                        } else {\n                            throw new Error('Upgrade cancelled by user');\n                        }\n                    } else {\n                        throw new Error(errorData.error || 'Failed to create checkout session');\n                    }\n                } catch (parseError) {\n                    throw new Error(\"Demo Mode: Stripe not configured. Would upgrade to \".concat(tier, \" ($\").concat(SUBSCRIPTION_TIERS[tier].price, \"/month)\"));\n                }\n            }\n        } catch (err) {\n            console.error('Error starting upgrade:', err);\n            throw err;\n        }\n    };\n    const manageBilling = async ()=>{\n        try {\n            const response = await fetch('/api/subscriptions/create-portal', {\n                method: 'POST'\n            });\n            if (response.ok) {\n                const { portalUrl } = await response.json();\n                window.location.href = portalUrl;\n            } else {\n                // Handle demo mode gracefully\n                console.log('Demo mode: Billing management requested');\n                // Show demo billing management options\n                const options = \"Demo Billing Management\\n\\nAvailable options:\\n• Downgrade to Free (cancel subscription)\\n• View current plan details\\n• Simulate plan changes\";\n                if ((subscription === null || subscription === void 0 ? void 0 : subscription.tier) !== 'FREE') {\n                    const confirmed = window.confirm(\"\".concat(options, \"\\n\\nWould you like to downgrade to the Free plan?\\n\\n(This simulates canceling your subscription)\"));\n                    if (confirmed) {\n                        var _session_user;\n                        // Simulate downgrade to free\n                        const newSubscription = {\n                            tier: 'FREE',\n                            tierName: SUBSCRIPTION_TIERS.FREE.name,\n                            price: SUBSCRIPTION_TIERS.FREE.price,\n                            features: SUBSCRIPTION_TIERS.FREE.features,\n                            limits: SUBSCRIPTION_TIERS.FREE.limits,\n                            isActive: true\n                        };\n                        setSubscription(newSubscription);\n                        // Save to localStorage for persistence across navigation\n                        if (session === null || session === void 0 ? void 0 : (_session_user = session.user) === null || _session_user === void 0 ? void 0 : _session_user.email) {\n                            const localSubscriptionKey = \"demo_subscription_\".concat(session.user.email);\n                            localStorage.setItem(localSubscriptionKey, JSON.stringify(newSubscription));\n                            console.log('Saved demo downgrade to localStorage:', newSubscription);\n                        }\n                        alert(\"✅ Demo downgrade successful!\\n\\nYou are now on the Free plan.\\n\\nThis is a local simulation - no actual billing changes occurred.\");\n                        return; // Success, don't throw error\n                    }\n                } else {\n                    alert('Demo Mode: You are already on the Free plan.\\n\\nIn a real environment, this would open the Stripe billing portal.');\n                }\n                throw new Error('Demo Mode: Billing portal simulation completed');\n            }\n        } catch (err) {\n            console.error('Error opening billing portal:', err);\n            throw err;\n        }\n    };\n    const refresh = async ()=>{\n        setIsLoading(true);\n        await fetchSubscriptionStatus();\n    };\n    return {\n        subscription,\n        isLoading,\n        error,\n        canAccess,\n        canUseFeature,\n        canAddResource,\n        getResourceLimit,\n        getUpgradeMessage: getUpgradeMessageForTier,\n        needsUpgrade,\n        refresh,\n        upgrade,\n        manageBilling\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/useSubscription.ts\n"));

/***/ })

});