"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/receipts/page",{

/***/ "(app-pages-browser)/./services/ocrService.ts":
/*!********************************!*\
  !*** ./services/ocrService.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ocrService: () => (/* binding */ ocrService)\n/* harmony export */ });\n/* harmony import */ var tesseract_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tesseract.js */ \"(app-pages-browser)/../../node_modules/tesseract.js/src/index.js\");\n/* harmony import */ var tesseract_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(tesseract_js__WEBPACK_IMPORTED_MODULE_0__);\n\nclass OCRService {\n    async initialize() {\n        if (this.isInitialized) return;\n        try {\n            console.log('🔍 Initializing OCR engine...');\n            this.worker = await (0,tesseract_js__WEBPACK_IMPORTED_MODULE_0__.createWorker)('eng');\n            // Configure Tesseract for better receipt reading\n            await this.worker.setParameters({\n                'tessedit_char_whitelist': '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.,$/:-# ',\n                'tessedit_pageseg_mode': '6',\n                'preserve_interword_spaces': '1'\n            });\n            this.isInitialized = true;\n            console.log('✅ OCR engine initialized successfully');\n        } catch (error) {\n            console.error('❌ Failed to initialize OCR engine:', error);\n            throw new Error('Failed to initialize OCR engine');\n        }\n    }\n    async preprocessImage(imageFile) {\n        return new Promise((resolve, reject)=>{\n            const canvas = document.createElement('canvas');\n            const ctx = canvas.getContext('2d');\n            const img = new Image();\n            img.onload = ()=>{\n                // Set canvas size\n                canvas.width = img.width;\n                canvas.height = img.height;\n                if (!ctx) {\n                    reject(new Error('Could not get canvas context'));\n                    return;\n                }\n                // Draw original image\n                ctx.drawImage(img, 0, 0);\n                // Get image data for processing\n                const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n                const data = imageData.data;\n                // Convert to grayscale and increase contrast\n                for(let i = 0; i < data.length; i += 4){\n                    const gray = Math.round(0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2]);\n                    // Increase contrast\n                    const contrast = 1.5;\n                    const factor = 259 * (contrast + 255) / (255 * (259 - contrast));\n                    const enhanced = Math.min(255, Math.max(0, factor * (gray - 128) + 128));\n                    data[i] = enhanced; // Red\n                    data[i + 1] = enhanced; // Green\n                    data[i + 2] = enhanced; // Blue\n                // Alpha stays the same\n                }\n                // Put the processed image data back\n                ctx.putImageData(imageData, 0, 0);\n                // Convert to data URL\n                resolve(canvas.toDataURL('image/png'));\n            };\n            img.onerror = ()=>reject(new Error('Failed to load image'));\n            img.src = URL.createObjectURL(imageFile);\n        });\n    }\n    async processReceiptImage(imageFile) {\n        if (!this.worker || !this.isInitialized) {\n            await this.initialize();\n        }\n        try {\n            console.log('📄 Preprocessing receipt image...');\n            const preprocessedImage = await this.preprocessImage(imageFile);\n            console.log('🔍 Processing receipt image with OCR...');\n            const result = await this.worker.recognize(preprocessedImage);\n            console.log('✅ OCR completed', {\n                confidence: result.data.confidence,\n                textLength: result.data.text.length,\n                rawText: result.data.text.substring(0, 200) + '...'\n            });\n            return {\n                text: result.data.text,\n                confidence: result.data.confidence\n            };\n        } catch (error) {\n            console.error('❌ OCR processing failed:', error);\n            throw new Error('Failed to process image with OCR');\n        }\n    }\n    parseReceiptText(ocrText, confidence) {\n        console.log('🔍 Parsing receipt text...');\n        console.log('Raw OCR text:', ocrText);\n        const lines = ocrText.split('\\n').map((line)=>line.trim()).filter((line)=>line.length > 0);\n        // Extract merchant name (usually first or second line)\n        const merchant = this.extractMerchant(lines);\n        // Extract total amount\n        const amount = this.extractTotalAmount(lines);\n        // Extract date\n        const date = this.extractDate(lines);\n        // Extract line items\n        const items = this.extractItems(lines);\n        const parsed = {\n            merchant,\n            amount,\n            date,\n            items,\n            rawText: ocrText,\n            confidence: Math.max(confidence * 0.8, 60) // Adjust confidence for parsing uncertainty\n        };\n        console.log('✅ Receipt parsed successfully:', parsed);\n        return parsed;\n    }\n    extractMerchant(lines) {\n        // Common merchant patterns to look for\n        const merchantPatterns = [\n            /^([A-Za-z\\s&'.-]{3,40})$/,\n            /^([A-Z\\s&'.-]{3,40})\\s+STORE/,\n            /^([A-Z\\s&'.-]{3,40})\\s+MARKET/,\n            /^([A-Z\\s&'.-]{3,40})\\s+INC/\n        ];\n        // Look for merchant name in first 7 lines\n        for(let i = 0; i < Math.min(7, lines.length); i++){\n            const line = lines[i].trim();\n            // Skip obviously non-merchant lines\n            if (line.match(/^\\d+/) || line.includes('RECEIPT') || line.includes('INVOICE') || line.includes('#') || line.includes('TEL') || line.includes('WWW') || line.includes('@') || line.includes('.COM') || line.includes('STREET') || line.includes('AVE') || line.includes('BLVD') || line.includes('RD') || line.length < 3 || line.length > 50) {\n                continue;\n            }\n            // Try merchant patterns\n            for (const pattern of merchantPatterns){\n                const match = line.match(pattern);\n                if (match) {\n                    return match[1].trim().toUpperCase();\n                }\n            }\n            // If no pattern matches but line looks like merchant name\n            if (line.match(/^[A-Za-z\\s&'.-]+$/) && line.length >= 3 && line.length <= 40) {\n                // Check if it's not a common non-merchant word\n                const nonMerchantWords = [\n                    'THANK',\n                    'YOU',\n                    'VISIT',\n                    'AGAIN',\n                    'CUSTOMER',\n                    'COPY'\n                ];\n                if (!nonMerchantWords.some((word)=>line.includes(word))) {\n                    return line.toUpperCase();\n                }\n            }\n        }\n        return 'UNKNOWN MERCHANT';\n    }\n    extractTotalAmount(lines) {\n        // Look for total amount patterns\n        const totalPatterns = [\n            /TOTAL.*?\\$?(\\d+\\.?\\d*)/i,\n            /AMOUNT.*?\\$?(\\d+\\.?\\d*)/i,\n            /BALANCE.*?\\$?(\\d+\\.?\\d*)/i,\n            /\\$(\\d+\\.\\d{2})\\s*$/,\n            /(\\d+\\.\\d{2})\\s*TOTAL/i\n        ];\n        // Search from bottom up as totals are usually at the end\n        for(let i = lines.length - 1; i >= 0; i--){\n            const line = lines[i];\n            for (const pattern of totalPatterns){\n                const match = line.match(pattern);\n                if (match) {\n                    const amount = parseFloat(match[1]);\n                    if (!isNaN(amount) && amount > 0 && amount < 10000) {\n                        return amount;\n                    }\n                }\n            }\n        }\n        // If no clear total found, look for largest reasonable amount\n        const amounts = [];\n        lines.forEach((line)=>{\n            const matches = line.match(/\\$?(\\d+\\.\\d{2})/g) || [];\n            matches.forEach((match)=>{\n                const amount = parseFloat(match.replace('$', ''));\n                if (!isNaN(amount) && amount > 0 && amount < 10000) {\n                    amounts.push(amount);\n                }\n            });\n        });\n        return amounts.length > 0 ? Math.max(...amounts) : 0;\n    }\n    extractDate(lines) {\n        const datePatterns = [\n            /(\\d{1,2}\\/\\d{1,2}\\/\\d{2,4})/,\n            /(\\d{1,2}-\\d{1,2}-\\d{2,4})/,\n            /(\\d{4}-\\d{2}-\\d{2})/,\n            /(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec).*?(\\d{1,2}),?\\s*(\\d{4})/i\n        ];\n        for (const line of lines){\n            for (const pattern of datePatterns){\n                const match = line.match(pattern);\n                if (match) {\n                    try {\n                        // Try to parse and normalize the date\n                        const dateStr = match[0];\n                        const date = new Date(dateStr);\n                        if (!isNaN(date.getTime())) {\n                            return date.toISOString().split('T')[0]; // Return YYYY-MM-DD format\n                        }\n                    } catch (e) {\n                        continue;\n                    }\n                }\n            }\n        }\n        // Default to today if no date found\n        return new Date().toISOString().split('T')[0];\n    }\n    extractItems(lines) {\n        const items = [];\n        for (const line of lines){\n            // Look for lines with item name and price\n            // Pattern: \"ITEM NAME    $X.XX\" or \"QTY ITEM NAME $X.XX\"\n            const itemPatterns = [\n                /^(\\d+)\\s+(.+?)\\s+\\$?(\\d+\\.\\d{2})$/,\n                /^(.+?)\\s+\\$?(\\d+\\.\\d{2})$/,\n                /^(.+?)\\s+(\\d+\\.\\d{2})\\s*$/ // \"BANANAS 3.99\"\n            ];\n            for (const pattern of itemPatterns){\n                const match = line.match(pattern);\n                if (match) {\n                    let quantity;\n                    let name;\n                    let price;\n                    if (match.length === 4) {\n                        // Pattern with quantity\n                        quantity = parseInt(match[1]);\n                        name = match[2].trim();\n                        price = parseFloat(match[3]);\n                    } else {\n                        // Pattern without quantity\n                        name = match[1].trim();\n                        price = parseFloat(match[2]);\n                    }\n                    // Filter out obviously non-item lines\n                    if (name && !name.match(/TOTAL|TAX|SUBTOTAL|CHANGE|BALANCE|RECEIPT|STORE|THANK/i) && name.length > 2 && name.length < 50 && price > 0 && price < 1000) {\n                        items.push({\n                            name: name.toUpperCase(),\n                            price,\n                            quantity\n                        });\n                    }\n                    break;\n                }\n            }\n        }\n        return items;\n    }\n    async cleanup() {\n        if (this.worker) {\n            await this.worker.terminate();\n            this.worker = null;\n            this.isInitialized = false;\n            console.log('🧹 OCR engine cleaned up');\n        }\n    }\n    constructor(){\n        this.worker = null;\n        this.isInitialized = false;\n    }\n}\n// Export singleton instance\nconst ocrService = new OCRService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NlcnZpY2VzL29jclNlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTRDO0FBb0I1QyxNQUFNQztJQUlKLE1BQU1DLGFBQTRCO1FBQ2hDLElBQUksSUFBSSxDQUFDQyxhQUFhLEVBQUU7UUFFeEIsSUFBSTtZQUNGQyxRQUFRQyxHQUFHLENBQUM7WUFDWixJQUFJLENBQUNDLE1BQU0sR0FBRyxNQUFNTiwwREFBWUEsQ0FBQztZQUVqQyxpREFBaUQ7WUFDakQsTUFBTSxJQUFJLENBQUNNLE1BQU0sQ0FBQ0MsYUFBYSxDQUFDO2dCQUM5QiwyQkFBMkI7Z0JBQzNCLHlCQUF5QjtnQkFDekIsNkJBQTZCO1lBQy9CO1lBRUEsSUFBSSxDQUFDSixhQUFhLEdBQUc7WUFDckJDLFFBQVFDLEdBQUcsQ0FBQztRQUNkLEVBQUUsT0FBT0csT0FBTztZQUNkSixRQUFRSSxLQUFLLENBQUMsc0NBQXNDQTtZQUNwRCxNQUFNLElBQUlDLE1BQU07UUFDbEI7SUFDRjtJQUVBLE1BQWNDLGdCQUFnQkMsU0FBZSxFQUFtQjtRQUM5RCxPQUFPLElBQUlDLFFBQVEsQ0FBQ0MsU0FBU0M7WUFDM0IsTUFBTUMsU0FBU0MsU0FBU0MsYUFBYSxDQUFDO1lBQ3RDLE1BQU1DLE1BQU1ILE9BQU9JLFVBQVUsQ0FBQztZQUM5QixNQUFNQyxNQUFNLElBQUlDO1lBRWhCRCxJQUFJRSxNQUFNLEdBQUc7Z0JBQ1gsa0JBQWtCO2dCQUNsQlAsT0FBT1EsS0FBSyxHQUFHSCxJQUFJRyxLQUFLO2dCQUN4QlIsT0FBT1MsTUFBTSxHQUFHSixJQUFJSSxNQUFNO2dCQUUxQixJQUFJLENBQUNOLEtBQUs7b0JBQ1JKLE9BQU8sSUFBSUwsTUFBTTtvQkFDakI7Z0JBQ0Y7Z0JBRUEsc0JBQXNCO2dCQUN0QlMsSUFBSU8sU0FBUyxDQUFDTCxLQUFLLEdBQUc7Z0JBRXRCLGdDQUFnQztnQkFDaEMsTUFBTU0sWUFBWVIsSUFBSVMsWUFBWSxDQUFDLEdBQUcsR0FBR1osT0FB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LCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbmF0aGFcXE9uZURyaXZlXFxEZXNrdG9wXFxNb25leVF1ZXN0VjNcXHBhY2thZ2VzXFx3ZWJzaXRlXFxzZXJ2aWNlc1xcb2NyU2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVXb3JrZXIgfSBmcm9tICd0ZXNzZXJhY3QuanMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE9DUlJlc3VsdCB7XG4gIHRleHQ6IHN0cmluZztcbiAgY29uZmlkZW5jZTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBhcnNlZFJlY2VpcHQge1xuICBtZXJjaGFudDogc3RyaW5nO1xuICBhbW91bnQ6IG51bWJlcjtcbiAgZGF0ZTogc3RyaW5nO1xuICBpdGVtczogQXJyYXk8e1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBwcmljZTogbnVtYmVyO1xuICAgIHF1YW50aXR5PzogbnVtYmVyO1xuICB9PjtcbiAgcmF3VGV4dDogc3RyaW5nO1xuICBjb25maWRlbmNlOiBudW1iZXI7XG59XG5cbmNsYXNzIE9DUlNlcnZpY2Uge1xuICBwcml2YXRlIHdvcmtlcjogVGVzc2VyYWN0LldvcmtlciB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIGlzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuICBhc3luYyBpbml0aWFsaXplKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICh0aGlzLmlzSW5pdGlhbGl6ZWQpIHJldHVybjtcblxuICAgIHRyeSB7XG4gICAgICBjb25zb2xlLmxvZygn8J+UjSBJbml0aWFsaXppbmcgT0NSIGVuZ2luZS4uLicpO1xuICAgICAgdGhpcy53b3JrZXIgPSBhd2FpdCBjcmVhdGVXb3JrZXIoJ2VuZycpO1xuXG4gICAgICAvLyBDb25maWd1cmUgVGVzc2VyYWN0IGZvciBiZXR0ZXIgcmVjZWlwdCByZWFkaW5nXG4gICAgICBhd2FpdCB0aGlzLndvcmtlci5zZXRQYXJhbWV0ZXJzKHtcbiAgICAgICAgJ3Rlc3NlZGl0X2NoYXJfd2hpdGVsaXN0JzogJzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6LiwkLzotIyAnLFxuICAgICAgICAndGVzc2VkaXRfcGFnZXNlZ19tb2RlJzogJzYnLCAvLyBTaW5nbGUgdW5pZm9ybSBibG9jayBvZiB0ZXh0XG4gICAgICAgICdwcmVzZXJ2ZV9pbnRlcndvcmRfc3BhY2VzJzogJzEnXG4gICAgICB9KTtcblxuICAgICAgdGhpcy5pc0luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUubG9nKCfinIUgT0NSIGVuZ2luZSBpbml0aWFsaXplZCBzdWNjZXNzZnVsbHknKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEZhaWxlZCB0byBpbml0aWFsaXplIE9DUiBlbmdpbmU6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gaW5pdGlhbGl6ZSBPQ1IgZW5naW5lJyk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBwcmVwcm9jZXNzSW1hZ2UoaW1hZ2VGaWxlOiBGaWxlKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xuXG4gICAgICBpbWcub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAvLyBTZXQgY2FudmFzIHNpemVcbiAgICAgICAgY2FudmFzLndpZHRoID0gaW1nLndpZHRoO1xuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gaW1nLmhlaWdodDtcblxuICAgICAgICBpZiAoIWN0eCkge1xuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ0NvdWxkIG5vdCBnZXQgY2FudmFzIGNvbnRleHQnKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRHJhdyBvcmlnaW5hbCBpbWFnZVxuICAgICAgICBjdHguZHJhd0ltYWdlKGltZywgMCwgMCk7XG5cbiAgICAgICAgLy8gR2V0IGltYWdlIGRhdGEgZm9yIHByb2Nlc3NpbmdcbiAgICAgICAgY29uc3QgaW1hZ2VEYXRhID0gY3R4LmdldEltYWdlRGF0YSgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgICAgICBjb25zdCBkYXRhID0gaW1hZ2VEYXRhLmRhdGE7XG5cbiAgICAgICAgLy8gQ29udmVydCB0byBncmF5c2NhbGUgYW5kIGluY3JlYXNlIGNvbnRyYXN0XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkgKz0gNCkge1xuICAgICAgICAgIGNvbnN0IGdyYXkgPSBNYXRoLnJvdW5kKDAuMjk5ICogZGF0YVtpXSArIDAuNTg3ICogZGF0YVtpICsgMV0gKyAwLjExNCAqIGRhdGFbaSArIDJdKTtcblxuICAgICAgICAgIC8vIEluY3JlYXNlIGNvbnRyYXN0XG4gICAgICAgICAgY29uc3QgY29udHJhc3QgPSAxLjU7XG4gICAgICAgICAgY29uc3QgZmFjdG9yID0gKDI1OSAqIChjb250cmFzdCArIDI1NSkpIC8gKDI1NSAqICgyNTkgLSBjb250cmFzdCkpO1xuICAgICAgICAgIGNvbnN0IGVuaGFuY2VkID0gTWF0aC5taW4oMjU1LCBNYXRoLm1heCgwLCBmYWN0b3IgKiAoZ3JheSAtIDEyOCkgKyAxMjgpKTtcblxuICAgICAgICAgIGRhdGFbaV0gPSBlbmhhbmNlZDsgICAgIC8vIFJlZFxuICAgICAgICAgIGRhdGFbaSArIDFdID0gZW5oYW5jZWQ7IC8vIEdyZWVuXG4gICAgICAgICAgZGF0YVtpICsgMl0gPSBlbmhhbmNlZDsgLy8gQmx1ZVxuICAgICAgICAgIC8vIEFscGhhIHN0YXlzIHRoZSBzYW1lXG4gICAgICAgIH1cblxuICAgICAgICAvLyBQdXQgdGhlIHByb2Nlc3NlZCBpbWFnZSBkYXRhIGJhY2tcbiAgICAgICAgY3R4LnB1dEltYWdlRGF0YShpbWFnZURhdGEsIDAsIDApO1xuXG4gICAgICAgIC8vIENvbnZlcnQgdG8gZGF0YSBVUkxcbiAgICAgICAgcmVzb2x2ZShjYW52YXMudG9EYXRhVVJMKCdpbWFnZS9wbmcnKSk7XG4gICAgICB9O1xuXG4gICAgICBpbWcub25lcnJvciA9ICgpID0+IHJlamVjdChuZXcgRXJyb3IoJ0ZhaWxlZCB0byBsb2FkIGltYWdlJykpO1xuICAgICAgaW1nLnNyYyA9IFVSTC5jcmVhdGVPYmplY3RVUkwoaW1hZ2VGaWxlKTtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIHByb2Nlc3NSZWNlaXB0SW1hZ2UoaW1hZ2VGaWxlOiBGaWxlKTogUHJvbWlzZTxPQ1JSZXN1bHQ+IHtcbiAgICBpZiAoIXRoaXMud29ya2VyIHx8ICF0aGlzLmlzSW5pdGlhbGl6ZWQpIHtcbiAgICAgIGF3YWl0IHRoaXMuaW5pdGlhbGl6ZSgpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zb2xlLmxvZygn8J+ThCBQcmVwcm9jZXNzaW5nIHJlY2VpcHQgaW1hZ2UuLi4nKTtcbiAgICAgIGNvbnN0IHByZXByb2Nlc3NlZEltYWdlID0gYXdhaXQgdGhpcy5wcmVwcm9jZXNzSW1hZ2UoaW1hZ2VGaWxlKTtcblxuICAgICAgY29uc29sZS5sb2coJ/CflI0gUHJvY2Vzc2luZyByZWNlaXB0IGltYWdlIHdpdGggT0NSLi4uJyk7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLndvcmtlciEucmVjb2duaXplKHByZXByb2Nlc3NlZEltYWdlKTtcblxuICAgICAgY29uc29sZS5sb2coJ+KchSBPQ1IgY29tcGxldGVkJywge1xuICAgICAgICBjb25maWRlbmNlOiByZXN1bHQuZGF0YS5jb25maWRlbmNlLFxuICAgICAgICB0ZXh0TGVuZ3RoOiByZXN1bHQuZGF0YS50ZXh0Lmxlbmd0aCxcbiAgICAgICAgcmF3VGV4dDogcmVzdWx0LmRhdGEudGV4dC5zdWJzdHJpbmcoMCwgMjAwKSArICcuLi4nXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGV4dDogcmVzdWx0LmRhdGEudGV4dCxcbiAgICAgICAgY29uZmlkZW5jZTogcmVzdWx0LmRhdGEuY29uZmlkZW5jZVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIE9DUiBwcm9jZXNzaW5nIGZhaWxlZDonLCBlcnJvcik7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBwcm9jZXNzIGltYWdlIHdpdGggT0NSJyk7XG4gICAgfVxuICB9XG5cbiAgcGFyc2VSZWNlaXB0VGV4dChvY3JUZXh0OiBzdHJpbmcsIGNvbmZpZGVuY2U6IG51bWJlcik6IFBhcnNlZFJlY2VpcHQge1xuICAgIGNvbnNvbGUubG9nKCfwn5SNIFBhcnNpbmcgcmVjZWlwdCB0ZXh0Li4uJyk7XG4gICAgY29uc29sZS5sb2coJ1JhdyBPQ1IgdGV4dDonLCBvY3JUZXh0KTtcblxuICAgIGNvbnN0IGxpbmVzID0gb2NyVGV4dC5zcGxpdCgnXFxuJykubWFwKGxpbmUgPT4gbGluZS50cmltKCkpLmZpbHRlcihsaW5lID0+IGxpbmUubGVuZ3RoID4gMCk7XG5cbiAgICAvLyBFeHRyYWN0IG1lcmNoYW50IG5hbWUgKHVzdWFsbHkgZmlyc3Qgb3Igc2Vjb25kIGxpbmUpXG4gICAgY29uc3QgbWVyY2hhbnQgPSB0aGlzLmV4dHJhY3RNZXJjaGFudChsaW5lcyk7XG5cbiAgICAvLyBFeHRyYWN0IHRvdGFsIGFtb3VudFxuICAgIGNvbnN0IGFtb3VudCA9IHRoaXMuZXh0cmFjdFRvdGFsQW1vdW50KGxpbmVzKTtcblxuICAgIC8vIEV4dHJhY3QgZGF0ZVxuICAgIGNvbnN0IGRhdGUgPSB0aGlzLmV4dHJhY3REYXRlKGxpbmVzKTtcblxuICAgIC8vIEV4dHJhY3QgbGluZSBpdGVtc1xuICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5leHRyYWN0SXRlbXMobGluZXMpO1xuXG4gICAgY29uc3QgcGFyc2VkOiBQYXJzZWRSZWNlaXB0ID0ge1xuICAgICAgbWVyY2hhbnQsXG4gICAgICBhbW91bnQsXG4gICAgICBkYXRlLFxuICAgICAgaXRlbXMsXG4gICAgICByYXdUZXh0OiBvY3JUZXh0LFxuICAgICAgY29uZmlkZW5jZTogTWF0aC5tYXgoY29uZmlkZW5jZSAqIDAuOCwgNjApIC8vIEFkanVzdCBjb25maWRlbmNlIGZvciBwYXJzaW5nIHVuY2VydGFpbnR5XG4gICAgfTtcblxuICAgIGNvbnNvbGUubG9nKCfinIUgUmVjZWlwdCBwYXJzZWQgc3VjY2Vzc2Z1bGx5OicsIHBhcnNlZCk7XG4gICAgcmV0dXJuIHBhcnNlZDtcbiAgfVxuXG4gIHByaXZhdGUgZXh0cmFjdE1lcmNoYW50KGxpbmVzOiBzdHJpbmdbXSk6IHN0cmluZyB7XG4gICAgLy8gQ29tbW9uIG1lcmNoYW50IHBhdHRlcm5zIHRvIGxvb2sgZm9yXG4gICAgY29uc3QgbWVyY2hhbnRQYXR0ZXJucyA9IFtcbiAgICAgIC9eKFtBLVphLXpcXHMmJy4tXXszLDQwfSkkLyxcbiAgICAgIC9eKFtBLVpcXHMmJy4tXXszLDQwfSlcXHMrU1RPUkUvLFxuICAgICAgL14oW0EtWlxccyYnLi1dezMsNDB9KVxccytNQVJLRVQvLFxuICAgICAgL14oW0EtWlxccyYnLi1dezMsNDB9KVxccytJTkMvXG4gICAgXTtcblxuICAgIC8vIExvb2sgZm9yIG1lcmNoYW50IG5hbWUgaW4gZmlyc3QgNyBsaW5lc1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTWF0aC5taW4oNywgbGluZXMubGVuZ3RoKTsgaSsrKSB7XG4gICAgICBjb25zdCBsaW5lID0gbGluZXNbaV0udHJpbSgpO1xuXG4gICAgICAvLyBTa2lwIG9idmlvdXNseSBub24tbWVyY2hhbnQgbGluZXNcbiAgICAgIGlmIChsaW5lLm1hdGNoKC9eXFxkKy8pIHx8IGxpbmUuaW5jbHVkZXMoJ1JFQ0VJUFQnKSB8fCBsaW5lLmluY2x1ZGVzKCdJTlZPSUNFJykgfHxcbiAgICAgICAgICBsaW5lLmluY2x1ZGVzKCcjJykgfHwgbGluZS5pbmNsdWRlcygnVEVMJykgfHwgbGluZS5pbmNsdWRlcygnV1dXJykgfHxcbiAgICAgICAgICBsaW5lLmluY2x1ZGVzKCdAJykgfHwgbGluZS5pbmNsdWRlcygnLkNPTScpIHx8IGxpbmUuaW5jbHVkZXMoJ1NUUkVFVCcpIHx8XG4gICAgICAgICAgbGluZS5pbmNsdWRlcygnQVZFJykgfHwgbGluZS5pbmNsdWRlcygnQkxWRCcpIHx8IGxpbmUuaW5jbHVkZXMoJ1JEJykgfHxcbiAgICAgICAgICBsaW5lLmxlbmd0aCA8IDMgfHwgbGluZS5sZW5ndGggPiA1MCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gVHJ5IG1lcmNoYW50IHBhdHRlcm5zXG4gICAgICBmb3IgKGNvbnN0IHBhdHRlcm4gb2YgbWVyY2hhbnRQYXR0ZXJucykge1xuICAgICAgICBjb25zdCBtYXRjaCA9IGxpbmUubWF0Y2gocGF0dGVybik7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgIHJldHVybiBtYXRjaFsxXS50cmltKCkudG9VcHBlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJZiBubyBwYXR0ZXJuIG1hdGNoZXMgYnV0IGxpbmUgbG9va3MgbGlrZSBtZXJjaGFudCBuYW1lXG4gICAgICBpZiAobGluZS5tYXRjaCgvXltBLVphLXpcXHMmJy4tXSskLykgJiYgbGluZS5sZW5ndGggPj0gMyAmJiBsaW5lLmxlbmd0aCA8PSA0MCkge1xuICAgICAgICAvLyBDaGVjayBpZiBpdCdzIG5vdCBhIGNvbW1vbiBub24tbWVyY2hhbnQgd29yZFxuICAgICAgICBjb25zdCBub25NZXJjaGFudFdvcmRzID0gWydUSEFOSycsICdZT1UnLCAnVklTSVQnLCAnQUdBSU4nLCAnQ1VTVE9NRVInLCAnQ09QWSddO1xuICAgICAgICBpZiAoIW5vbk1lcmNoYW50V29yZHMuc29tZSh3b3JkID0+IGxpbmUuaW5jbHVkZXMod29yZCkpKSB7XG4gICAgICAgICAgcmV0dXJuIGxpbmUudG9VcHBlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAnVU5LTk9XTiBNRVJDSEFOVCc7XG4gIH1cblxuICBwcml2YXRlIGV4dHJhY3RUb3RhbEFtb3VudChsaW5lczogc3RyaW5nW10pOiBudW1iZXIge1xuICAgIC8vIExvb2sgZm9yIHRvdGFsIGFtb3VudCBwYXR0ZXJuc1xuICAgIGNvbnN0IHRvdGFsUGF0dGVybnMgPSBbXG4gICAgICAvVE9UQUwuKj9cXCQ/KFxcZCtcXC4/XFxkKikvaSxcbiAgICAgIC9BTU9VTlQuKj9cXCQ/KFxcZCtcXC4/XFxkKikvaSxcbiAgICAgIC9CQUxBTkNFLio/XFwkPyhcXGQrXFwuP1xcZCopL2ksXG4gICAgICAvXFwkKFxcZCtcXC5cXGR7Mn0pXFxzKiQvLCAvLyBMaW5lIGVuZGluZyB3aXRoIGN1cnJlbmN5IGFtb3VudFxuICAgICAgLyhcXGQrXFwuXFxkezJ9KVxccypUT1RBTC9pXG4gICAgXTtcblxuICAgIC8vIFNlYXJjaCBmcm9tIGJvdHRvbSB1cCBhcyB0b3RhbHMgYXJlIHVzdWFsbHkgYXQgdGhlIGVuZFxuICAgIGZvciAobGV0IGkgPSBsaW5lcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgY29uc3QgbGluZSA9IGxpbmVzW2ldO1xuXG4gICAgICBmb3IgKGNvbnN0IHBhdHRlcm4gb2YgdG90YWxQYXR0ZXJucykge1xuICAgICAgICBjb25zdCBtYXRjaCA9IGxpbmUubWF0Y2gocGF0dGVybik7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgIGNvbnN0IGFtb3VudCA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICAgICAgICAgIGlmICghaXNOYU4oYW1vdW50KSAmJiBhbW91bnQgPiAwICYmIGFtb3VudCA8IDEwMDAwKSB7IC8vIFJlYXNvbmFibGUgYm91bmRzXG4gICAgICAgICAgICByZXR1cm4gYW1vdW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIElmIG5vIGNsZWFyIHRvdGFsIGZvdW5kLCBsb29rIGZvciBsYXJnZXN0IHJlYXNvbmFibGUgYW1vdW50XG4gICAgY29uc3QgYW1vdW50czogbnVtYmVyW10gPSBbXTtcbiAgICBsaW5lcy5mb3JFYWNoKGxpbmUgPT4ge1xuICAgICAgY29uc3QgbWF0Y2hlcyA9IGxpbmUubWF0Y2goL1xcJD8oXFxkK1xcLlxcZHsyfSkvZykgfHwgW107XG4gICAgICBtYXRjaGVzLmZvckVhY2gobWF0Y2ggPT4ge1xuICAgICAgICBjb25zdCBhbW91bnQgPSBwYXJzZUZsb2F0KG1hdGNoLnJlcGxhY2UoJyQnLCAnJykpO1xuICAgICAgICBpZiAoIWlzTmFOKGFtb3VudCkgJiYgYW1vdW50ID4gMCAmJiBhbW91bnQgPCAxMDAwMCkge1xuICAgICAgICAgIGFtb3VudHMucHVzaChhbW91bnQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBhbW91bnRzLmxlbmd0aCA+IDAgPyBNYXRoLm1heCguLi5hbW91bnRzKSA6IDA7XG4gIH1cblxuICBwcml2YXRlIGV4dHJhY3REYXRlKGxpbmVzOiBzdHJpbmdbXSk6IHN0cmluZyB7XG4gICAgY29uc3QgZGF0ZVBhdHRlcm5zID0gW1xuICAgICAgLyhcXGR7MSwyfVxcL1xcZHsxLDJ9XFwvXFxkezIsNH0pLyxcbiAgICAgIC8oXFxkezEsMn0tXFxkezEsMn0tXFxkezIsNH0pLyxcbiAgICAgIC8oXFxkezR9LVxcZHsyfS1cXGR7Mn0pLyxcbiAgICAgIC8oSmFufEZlYnxNYXJ8QXByfE1heXxKdW58SnVsfEF1Z3xTZXB8T2N0fE5vdnxEZWMpLio/KFxcZHsxLDJ9KSw/XFxzKihcXGR7NH0pL2lcbiAgICBdO1xuXG4gICAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVzKSB7XG4gICAgICBmb3IgKGNvbnN0IHBhdHRlcm4gb2YgZGF0ZVBhdHRlcm5zKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gbGluZS5tYXRjaChwYXR0ZXJuKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFRyeSB0byBwYXJzZSBhbmQgbm9ybWFsaXplIHRoZSBkYXRlXG4gICAgICAgICAgICBjb25zdCBkYXRlU3RyID0gbWF0Y2hbMF07XG4gICAgICAgICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoZGF0ZVN0cik7XG4gICAgICAgICAgICBpZiAoIWlzTmFOKGRhdGUuZ2V0VGltZSgpKSkge1xuICAgICAgICAgICAgICByZXR1cm4gZGF0ZS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF07IC8vIFJldHVybiBZWVlZLU1NLUREIGZvcm1hdFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIERlZmF1bHQgdG8gdG9kYXkgaWYgbm8gZGF0ZSBmb3VuZFxuICAgIHJldHVybiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXTtcbiAgfVxuXG4gIHByaXZhdGUgZXh0cmFjdEl0ZW1zKGxpbmVzOiBzdHJpbmdbXSk6IEFycmF5PHsgbmFtZTogc3RyaW5nOyBwcmljZTogbnVtYmVyOyBxdWFudGl0eT86IG51bWJlciB9PiB7XG4gICAgY29uc3QgaXRlbXM6IEFycmF5PHsgbmFtZTogc3RyaW5nOyBwcmljZTogbnVtYmVyOyBxdWFudGl0eT86IG51bWJlciB9PiA9IFtdO1xuXG4gICAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVzKSB7XG4gICAgICAvLyBMb29rIGZvciBsaW5lcyB3aXRoIGl0ZW0gbmFtZSBhbmQgcHJpY2VcbiAgICAgIC8vIFBhdHRlcm46IFwiSVRFTSBOQU1FICAgICRYLlhYXCIgb3IgXCJRVFkgSVRFTSBOQU1FICRYLlhYXCJcbiAgICAgIGNvbnN0IGl0ZW1QYXR0ZXJucyA9IFtcbiAgICAgICAgL14oXFxkKylcXHMrKC4rPylcXHMrXFwkPyhcXGQrXFwuXFxkezJ9KSQvLCAgLy8gXCIyIEJBTkFOQVMgJDMuOTlcIlxuICAgICAgICAvXiguKz8pXFxzK1xcJD8oXFxkK1xcLlxcZHsyfSkkLywgICAgICAgICAgIC8vIFwiQkFOQU5BUyAkMy45OVwiXG4gICAgICAgIC9eKC4rPylcXHMrKFxcZCtcXC5cXGR7Mn0pXFxzKiQvICAgICAgICAgICAgLy8gXCJCQU5BTkFTIDMuOTlcIlxuICAgICAgXTtcblxuICAgICAgZm9yIChjb25zdCBwYXR0ZXJuIG9mIGl0ZW1QYXR0ZXJucykge1xuICAgICAgICBjb25zdCBtYXRjaCA9IGxpbmUubWF0Y2gocGF0dGVybik7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgIGxldCBxdWFudGl0eTogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICAgICAgICAgIGxldCBuYW1lOiBzdHJpbmc7XG4gICAgICAgICAgbGV0IHByaWNlOiBudW1iZXI7XG5cbiAgICAgICAgICBpZiAobWF0Y2gubGVuZ3RoID09PSA0KSB7XG4gICAgICAgICAgICAvLyBQYXR0ZXJuIHdpdGggcXVhbnRpdHlcbiAgICAgICAgICAgIHF1YW50aXR5ID0gcGFyc2VJbnQobWF0Y2hbMV0pO1xuICAgICAgICAgICAgbmFtZSA9IG1hdGNoWzJdLnRyaW0oKTtcbiAgICAgICAgICAgIHByaWNlID0gcGFyc2VGbG9hdChtYXRjaFszXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFBhdHRlcm4gd2l0aG91dCBxdWFudGl0eVxuICAgICAgICAgICAgbmFtZSA9IG1hdGNoWzFdLnRyaW0oKTtcbiAgICAgICAgICAgIHByaWNlID0gcGFyc2VGbG9hdChtYXRjaFsyXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gRmlsdGVyIG91dCBvYnZpb3VzbHkgbm9uLWl0ZW0gbGluZXNcbiAgICAgICAgICBpZiAobmFtZSAmJiAhbmFtZS5tYXRjaCgvVE9UQUx8VEFYfFNVQlRPVEFMfENIQU5HRXxCQUxBTkNFfFJFQ0VJUFR8U1RPUkV8VEhBTksvaSkgJiZcbiAgICAgICAgICAgICAgbmFtZS5sZW5ndGggPiAyICYmIG5hbWUubGVuZ3RoIDwgNTAgJiYgcHJpY2UgPiAwICYmIHByaWNlIDwgMTAwMCkge1xuXG4gICAgICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgbmFtZTogbmFtZS50b1VwcGVyQ2FzZSgpLFxuICAgICAgICAgICAgICBwcmljZSxcbiAgICAgICAgICAgICAgcXVhbnRpdHlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBpdGVtcztcbiAgfVxuXG4gIGFzeW5jIGNsZWFudXAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKHRoaXMud29ya2VyKSB7XG4gICAgICBhd2FpdCB0aGlzLndvcmtlci50ZXJtaW5hdGUoKTtcbiAgICAgIHRoaXMud29ya2VyID0gbnVsbDtcbiAgICAgIHRoaXMuaXNJbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgY29uc29sZS5sb2coJ/Cfp7kgT0NSIGVuZ2luZSBjbGVhbmVkIHVwJyk7XG4gICAgfVxuICB9XG59XG5cbi8vIEV4cG9ydCBzaW5nbGV0b24gaW5zdGFuY2VcbmV4cG9ydCBjb25zdCBvY3JTZXJ2aWNlID0gbmV3IE9DUlNlcnZpY2UoKTsiXSwibmFtZXMiOlsiY3JlYXRlV29ya2VyIiwiT0NSU2VydmljZSIsImluaXRpYWxpemUiLCJpc0luaXRpYWxpemVkIiwiY29uc29sZSIsImxvZyIsIndvcmtlciIsInNldFBhcmFtZXRlcnMiLCJlcnJvciIsIkVycm9yIiwicHJlcHJvY2Vzc0ltYWdlIiwiaW1hZ2VGaWxlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJjYW52YXMiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjdHgiLCJnZXRDb250ZXh0IiwiaW1nIiwiSW1hZ2UiLCJvbmxvYWQiLCJ3aWR0aCIsImhlaWdodCIsImRyYXdJbWFnZSIsImltYWdlRGF0YSIsImdldEltYWdlRGF0YSIsImRhdGEiLCJpIiwibGVuZ3RoIiwiZ3JheSIsIk1hdGgiLCJyb3VuZCIsImNvbnRyYXN0IiwiZmFjdG9yIiwiZW5oYW5jZWQiLCJtaW4iLCJtYXgiLCJwdXRJbWFnZURhdGEiLCJ0b0RhdGFVUkwiLCJvbmVycm9yIiwic3JjIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwicHJvY2Vzc1JlY2VpcHRJbWFnZSIsInByZXByb2Nlc3NlZEltYWdlIiwicmVzdWx0IiwicmVjb2duaXplIiwiY29uZmlkZW5jZSIsInRleHRMZW5ndGgiLCJ0ZXh0IiwicmF3VGV4dCIsInN1YnN0cmluZyIsInBhcnNlUmVjZWlwdFRleHQiLCJvY3JUZXh0IiwibGluZXMiLCJzcGxpdCIsIm1hcCIsImxpbmUiLCJ0cmltIiwiZmlsdGVyIiwibWVyY2hhbnQiLCJleHRyYWN0TWVyY2hhbnQiLCJhbW91bnQiLCJleHRyYWN0VG90YWxBbW91bnQiLCJkYXRlIiwiZXh0cmFjdERhdGUiLCJpdGVtcyIsImV4dHJhY3RJdGVtcyIsInBhcnNlZCIsIm1lcmNoYW50UGF0dGVybnMiLCJtYXRjaCIsImluY2x1ZGVzIiwicGF0dGVybiIsInRvVXBwZXJDYXNlIiwibm9uTWVyY2hhbnRXb3JkcyIsInNvbWUiLCJ3b3JkIiwidG90YWxQYXR0ZXJucyIsInBhcnNlRmxvYXQiLCJpc05hTiIsImFtb3VudHMiLCJmb3JFYWNoIiwibWF0Y2hlcyIsInJlcGxhY2UiLCJwdXNoIiwiZGF0ZVBhdHRlcm5zIiwiZGF0ZVN0ciIsIkRhdGUiLCJnZXRUaW1lIiwidG9JU09TdHJpbmciLCJlIiwiaXRlbVBhdHRlcm5zIiwicXVhbnRpdHkiLCJuYW1lIiwicHJpY2UiLCJwYXJzZUludCIsImNsZWFudXAiLCJ0ZXJtaW5hdGUiLCJvY3JTZXJ2aWNlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./services/ocrService.ts\n"));

/***/ })

});