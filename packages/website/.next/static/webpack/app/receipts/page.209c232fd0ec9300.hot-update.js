"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/receipts/page",{

/***/ "(app-pages-browser)/./services/ocrService.ts":
/*!********************************!*\
  !*** ./services/ocrService.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ocrService: () => (/* binding */ ocrService)\n/* harmony export */ });\n/* harmony import */ var tesseract_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tesseract.js */ \"(app-pages-browser)/../../node_modules/tesseract.js/src/index.js\");\n/* harmony import */ var tesseract_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(tesseract_js__WEBPACK_IMPORTED_MODULE_0__);\n\nclass OCRService {\n    async initialize() {\n        if (this.isInitialized) return;\n        try {\n            console.log('🔍 Initializing OCR engine...');\n            this.worker = await (0,tesseract_js__WEBPACK_IMPORTED_MODULE_0__.createWorker)('eng');\n            // Configure Tesseract for better receipt reading\n            await this.worker.setParameters({\n                'tessedit_char_whitelist': '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.,$/:-# ',\n                'tessedit_pageseg_mode': '6',\n                'preserve_interword_spaces': '1'\n            });\n            this.isInitialized = true;\n            console.log('✅ OCR engine initialized successfully');\n        } catch (error) {\n            console.error('❌ Failed to initialize OCR engine:', error);\n            throw new Error('Failed to initialize OCR engine');\n        }\n    }\n    async preprocessImage(imageFile) {\n        return new Promise((resolve, reject)=>{\n            const canvas = document.createElement('canvas');\n            const ctx = canvas.getContext('2d');\n            const img = new Image();\n            img.onload = ()=>{\n                // Set canvas size\n                canvas.width = img.width;\n                canvas.height = img.height;\n                if (!ctx) {\n                    reject(new Error('Could not get canvas context'));\n                    return;\n                }\n                // Draw original image\n                ctx.drawImage(img, 0, 0);\n                // Get image data for processing\n                const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n                const data = imageData.data;\n                // Convert to grayscale and increase contrast\n                for(let i = 0; i < data.length; i += 4){\n                    const gray = Math.round(0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2]);\n                    // Increase contrast\n                    const contrast = 1.5;\n                    const factor = 259 * (contrast + 255) / (255 * (259 - contrast));\n                    const enhanced = Math.min(255, Math.max(0, factor * (gray - 128) + 128));\n                    data[i] = enhanced; // Red\n                    data[i + 1] = enhanced; // Green\n                    data[i + 2] = enhanced; // Blue\n                // Alpha stays the same\n                }\n                // Put the processed image data back\n                ctx.putImageData(imageData, 0, 0);\n                // Convert to data URL\n                resolve(canvas.toDataURL('image/png'));\n            };\n            img.onerror = ()=>reject(new Error('Failed to load image'));\n            img.src = URL.createObjectURL(imageFile);\n        });\n    }\n    async processReceiptImage(imageFile) {\n        if (!this.worker || !this.isInitialized) {\n            await this.initialize();\n        }\n        try {\n            console.log('📄 Preprocessing receipt image...');\n            const preprocessedImage = await this.preprocessImage(imageFile);\n            console.log('🔍 Processing receipt image with OCR...');\n            const result = await this.worker.recognize(preprocessedImage);\n            console.log('✅ OCR completed', {\n                confidence: result.data.confidence,\n                textLength: result.data.text.length,\n                rawText: result.data.text.substring(0, 200) + '...'\n            });\n            return {\n                text: result.data.text,\n                confidence: result.data.confidence\n            };\n        } catch (error) {\n            console.error('❌ OCR processing failed:', error);\n            throw new Error('Failed to process image with OCR');\n        }\n    }\n    parseReceiptText(ocrText, confidence) {\n        console.log('🔍 Parsing receipt text...');\n        console.log('Raw OCR text:', ocrText);\n        const lines = ocrText.split('\\n').map((line)=>line.trim()).filter((line)=>line.length > 0);\n        // Extract merchant name (usually first or second line)\n        const merchant = this.extractMerchant(lines);\n        // Extract line items FIRST (including tax)\n        const items = this.extractItems(lines);\n        // Extract total amount using the new rule\n        const amount = this.extractValidatedTotal(lines, items);\n        // Extract date\n        const date = this.extractDate(lines);\n        const parsed = {\n            merchant,\n            amount,\n            date,\n            items,\n            rawText: ocrText,\n            confidence: Math.max(confidence * 0.8, 60) // Adjust confidence for parsing uncertainty\n        };\n        console.log('✅ Receipt parsed successfully:', parsed);\n        return parsed;\n    }\n    extractMerchant(lines) {\n        // Common merchant patterns to look for\n        const merchantPatterns = [\n            /^([A-Za-z\\s&'.-]{3,40})$/,\n            /^([A-Z\\s&'.-]{3,40})\\s+STORE/,\n            /^([A-Z\\s&'.-]{3,40})\\s+MARKET/,\n            /^([A-Z\\s&'.-]{3,40})\\s+INC/\n        ];\n        // Look for merchant name in first 7 lines\n        for(let i = 0; i < Math.min(7, lines.length); i++){\n            const line = lines[i].trim();\n            // Skip obviously non-merchant lines\n            if (line.match(/^\\d+/) || line.includes('RECEIPT') || line.includes('INVOICE') || line.includes('#') || line.includes('TEL') || line.includes('WWW') || line.includes('@') || line.includes('.COM') || line.includes('STREET') || line.includes('AVE') || line.includes('BLVD') || line.includes('RD') || line.length < 3 || line.length > 50) {\n                continue;\n            }\n            // Try merchant patterns\n            for (const pattern of merchantPatterns){\n                const match = line.match(pattern);\n                if (match) {\n                    return match[1].trim().toUpperCase();\n                }\n            }\n            // If no pattern matches but line looks like merchant name\n            if (line.match(/^[A-Za-z\\s&'.-]+$/) && line.length >= 3 && line.length <= 40) {\n                // Check if it's not a common non-merchant word\n                const nonMerchantWords = [\n                    'THANK',\n                    'YOU',\n                    'VISIT',\n                    'AGAIN',\n                    'CUSTOMER',\n                    'COPY'\n                ];\n                if (!nonMerchantWords.some((word)=>line.includes(word))) {\n                    return line.toUpperCase();\n                }\n            }\n        }\n        return 'UNKNOWN MERCHANT';\n    }\n    extractValidatedTotal(lines, items) {\n        console.log('🔍 Looking for total that matches item sum...');\n        // Calculate expected total from items\n        const itemsTotal = items.reduce((sum, item)=>sum + item.price, 0);\n        console.log(\"Items sum to: $\".concat(itemsTotal.toFixed(2)));\n        // Look specifically for \"Total\" followed by dollar amount\n        const totalPatterns = [\n            /TOTAL\\s+[$]?(\\d+\\.\\d{2})/i,\n            /TOTAL\\s*:\\s*[$]?(\\d+\\.\\d{2})/i,\n            /TOTAL.*?[$](\\d+\\.\\d{2})/i\n        ];\n        const foundTotals = [];\n        // Find all potential totals\n        for(let i = 0; i < lines.length; i++){\n            const line = lines[i].trim();\n            for (const pattern of totalPatterns){\n                const match = line.match(pattern);\n                if (match) {\n                    const amount = parseFloat(match[1]);\n                    if (!isNaN(amount) && amount > 0) {\n                        foundTotals.push({\n                            amount,\n                            line\n                        });\n                        console.log(\"Found potential total: $\".concat(amount, ' in \"').concat(line, '\"'));\n                    }\n                }\n            }\n        }\n        // If we have items, try to match total to items sum\n        if (itemsTotal > 0 && foundTotals.length > 0) {\n            console.log('Validating totals against items sum...');\n            for (const total of foundTotals){\n                const difference = Math.abs(total.amount - itemsTotal);\n                console.log(\"Total $\".concat(total.amount, \" vs Items $\").concat(itemsTotal.toFixed(2), \" - difference: $\").concat(difference.toFixed(2)));\n                // Allow small rounding differences (±$0.05)\n                if (difference <= 0.05) {\n                    console.log(\"✅ Found matching total: $\".concat(total.amount));\n                    return total.amount;\n                }\n            }\n            // If no exact match, look for closest total that's reasonable\n            const sortedByCloseness = foundTotals.sort((a, b)=>Math.abs(a.amount - itemsTotal) - Math.abs(b.amount - itemsTotal));\n            const closest = sortedByCloseness[0];\n            if (closest && Math.abs(closest.amount - itemsTotal) <= itemsTotal * 0.1) {\n                console.log(\"⚠️ Using closest total: $\".concat(closest.amount, \" (\").concat(Math.abs(closest.amount - itemsTotal).toFixed(2), \" difference)\"));\n                return closest.amount;\n            }\n        }\n        // Fallback: use any \"Total\" we found\n        if (foundTotals.length > 0) {\n            console.log(\"⚠️ Using first total found: $\".concat(foundTotals[0].amount));\n            return foundTotals[0].amount;\n        }\n        // Final fallback: use items sum if we have items\n        if (itemsTotal > 0) {\n            console.log(\"⚠️ No total found, using items sum: $\".concat(itemsTotal.toFixed(2)));\n            return itemsTotal;\n        }\n        // Last resort: use old method\n        console.log('⚠️ Falling back to old total extraction method');\n        return this.extractTotalAmount(lines);\n    }\n    extractTotalAmount(lines) {\n        // Enhanced total amount patterns\n        const totalPatterns = [\n            /TOTAL.*?[$]?(\\d+\\.?\\d{2})/i,\n            /AMOUNT\\s+DUE.*?[$]?(\\d+\\.?\\d{2})/i,\n            /BALANCE.*?[$]?(\\d+\\.?\\d{2})/i,\n            /GRAND\\s+TOTAL.*?[$]?(\\d+\\.?\\d{2})/i,\n            /FINAL\\s+TOTAL.*?[$]?(\\d+\\.?\\d{2})/i,\n            /[$](\\d+\\.\\d{2})\\s*$/,\n            /(\\d+\\.\\d{2})\\s*TOTAL/i,\n            /TOTAL\\s+[$]?(\\d+\\.\\d{2})/i,\n            /[$]\\s*(\\d+\\.\\d{2})\\s*TOTAL/i\n        ];\n        console.log('🔍 Looking for total amount in lines:', lines.slice(-10));\n        // Search from bottom up as totals are usually at the end\n        for(let i = lines.length - 1; i >= Math.max(0, lines.length - 15); i--){\n            const line = lines[i].trim();\n            if (line.length === 0) continue;\n            console.log(\"Checking line \".concat(i, ': \"').concat(line, '\"'));\n            for (const pattern of totalPatterns){\n                const match = line.match(pattern);\n                if (match) {\n                    const amount = parseFloat(match[1]);\n                    console.log(\"Found potential total: \".concat(amount, \" from pattern: \").concat(pattern));\n                    if (!isNaN(amount) && amount > 0 && amount < 10000) {\n                        console.log(\"✅ Using total amount: \".concat(amount));\n                        return amount;\n                    }\n                }\n            }\n        }\n        console.log('⚠️ No clear total found, looking for largest amount');\n        // If no clear total found, look for largest reasonable amount\n        const amounts = [];\n        lines.forEach((line, index)=>{\n            // Look for money amounts: $X.XX or X.XX\n            const matches = line.match(/[$]?(\\d+\\.\\d{2})/g) || [];\n            matches.forEach((match)=>{\n                const amount = parseFloat(match.replace('$', ''));\n                if (!isNaN(amount) && amount > 0 && amount < 10000) {\n                    console.log(\"Found amount \".concat(amount, \" on line \").concat(index, ': \"').concat(line, '\"'));\n                    amounts.push(amount);\n                }\n            });\n        });\n        const maxAmount = amounts.length > 0 ? Math.max(...amounts) : 0;\n        console.log(\"Using largest amount found: \".concat(maxAmount));\n        return maxAmount;\n    }\n    extractDate(lines) {\n        const datePatterns = [\n            /(\\d{1,2}\\/\\d{1,2}\\/\\d{2,4})/,\n            /(\\d{1,2}-\\d{1,2}-\\d{2,4})/,\n            /(\\d{4}-\\d{2}-\\d{2})/,\n            /(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec).*?(\\d{1,2}),?\\s*(\\d{4})/i\n        ];\n        for (const line of lines){\n            for (const pattern of datePatterns){\n                const match = line.match(pattern);\n                if (match) {\n                    try {\n                        // Try to parse and normalize the date\n                        const dateStr = match[0];\n                        const date = new Date(dateStr);\n                        if (!isNaN(date.getTime())) {\n                            return date.toISOString().split('T')[0]; // Return YYYY-MM-DD format\n                        }\n                    } catch (e) {\n                        continue;\n                    }\n                }\n            }\n        }\n        // Default to today if no date found\n        return new Date().toISOString().split('T')[0];\n    }\n    extractItems(lines) {\n        const items = [];\n        console.log('🔍 Extracting items from lines...');\n        for(let i = 0; i < lines.length; i++){\n            const line = lines[i].trim();\n            if (line.length === 0) continue;\n            // Enhanced item patterns\n            const itemPatterns = [\n                /^(\\d+)\\s+(.+?)\\s+[$]?(\\d+\\.\\d{2})$/,\n                /^(\\d+)\\s+(.+?)\\s+(\\d+\\.\\d{2})\\s*$/,\n                /^(.+?)\\s{2,}[$]?(\\d+\\.\\d{2})$/,\n                /^(.+?)\\s+[$](\\d+\\.\\d{2})$/,\n                /^(.+?)\\s+(\\d+\\.\\d{2})\\s*$/,\n                /^(.{3,30}?)\\s+(\\d{1,3}\\.\\d{2})$/ // Generic: name followed by price\n            ];\n            for (const pattern of itemPatterns){\n                const match = line.match(pattern);\n                if (match) {\n                    let quantity;\n                    let name;\n                    let price;\n                    if (match.length === 4) {\n                        // Pattern with quantity\n                        quantity = parseInt(match[1]);\n                        name = match[2].trim();\n                        price = parseFloat(match[3]);\n                    } else {\n                        // Pattern without quantity\n                        name = match[1].trim();\n                        price = parseFloat(match[2]);\n                    }\n                    // Check if this is a tax item (include it!)\n                    const isTaxItem = /TAX|HST|GST|PST|VAT/i.test(name) || /TAX|HST|GST|PST|VAT/i.test(line);\n                    // Enhanced filtering for non-item lines (but allow tax items)\n                    const excludePatterns = [\n                        /TOTAL|SUBTOTAL|CHANGE|BALANCE|RECEIPT|STORE|THANK|VISIT|AGAIN|CUSTOMER|COPY/i,\n                        /^(SUB|GRAND|FINAL)/i,\n                        /PAYMENT|CASH|CREDIT|DEBIT|CARD/i,\n                        /^(DATE|TIME|CLERK|CASHIER)/i,\n                        /^\\d{1,2}\\/\\d{1,2}\\/\\d{2,4}/,\n                        /^\\d{2}:\\d{2}/\n                    ];\n                    const shouldExclude = !isTaxItem && (excludePatterns.some((pattern)=>pattern.test(name)) || excludePatterns.some((pattern)=>pattern.test(line)));\n                    if (name && !shouldExclude && name.length >= 2 && name.length <= 50 && price > 0 && price <= 1000 && !name.match(/^\\d+$/) && // Not just numbers\n                    name.match(/[A-Za-z]/) // Contains at least one letter\n                    ) {\n                        const itemType = isTaxItem ? ' [TAX]' : '';\n                        console.log('✅ Found item: \"'.concat(name, '\" - $').concat(price) + (quantity ? \" (qty: \".concat(quantity, \")\") : '') + itemType);\n                        items.push({\n                            name: name.toUpperCase(),\n                            price,\n                            quantity\n                        });\n                    }\n                    break;\n                }\n            }\n        }\n        console.log(\"Found \".concat(items.length, \" items total\"));\n        return items;\n    }\n    async cleanup() {\n        if (this.worker) {\n            await this.worker.terminate();\n            this.worker = null;\n            this.isInitialized = false;\n            console.log('🧹 OCR engine cleaned up');\n        }\n    }\n    constructor(){\n        this.worker = null;\n        this.isInitialized = false;\n    }\n}\n// Export singleton instance\nconst ocrService = new OCRService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NlcnZpY2VzL29jclNlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTRDO0FBb0I1QyxNQUFNQztJQUlKLE1BQU1DLGFBQTRCO1FBQ2hDLElBQUksSUFBSSxDQUFDQyxhQUFhLEVBQUU7UUFFeEIsSUFBSTtZQUNGQyxRQUFRQyxHQUFHLENBQUM7WUFDWixJQUFJLENBQUNDLE1BQU0sR0FBRyxNQUFNTiwwREFBWUEsQ0FBQztZQUVqQyxpREFBaUQ7WUFDakQsTUFBTSxJQUFJLENBQUNNLE1BQU0sQ0FBQ0MsYUFBYSxDQUFDO2dCQUM5QiwyQkFBMkI7Z0JBQzNCLHlCQUF5QjtnQkFDekIsNkJBQTZCO1lBQy9CO1lBRUEsSUFBSSxDQUFDSixhQUFhLEdBQUc7WUFDckJDLFFBQVFDLEdBQUcsQ0FBQztRQUNkLEVBQUUsT0FBT0csT0FBTztZQUNkSixRQUFRSSxLQUFLLENBQUMsc0NBQXNDQTtZQUNwRCxNQUFNLElBQUlDLE1BQU07UUFDbEI7SUFDRjtJQUVBLE1BQWNDLGdCQUFnQkMsU0FBZSxFQUFtQjtRQUM5RCxPQUFPLElBQUlDLFFBQVEsQ0FBQ0MsU0FBU0M7WUFDM0IsTUFBTUMsU0FBU0MsU0FBU0MsYUFBYSxDQUFDO1lBQ3RDLE1BQU1DLE1BQU1ILE9BQU9JLFVBQVUsQ0FBQztZQUM5QixNQUFNQyxNQUFNLElBQUlDO1lBRWhCRCxJQUFJRSxNQUFNLEdBQUc7Z0JBQ1gsa0JBQWtCO2dCQUNsQlAsT0FBT1EsS0FBSyxHQUFHSCxJQUFJRyxLQUFLO2dCQUN4QlIsT0FBT1MsTUFBTSxHQUFHSixJQUFJSSxNQUFNO2dCQUUxQixJQUFJLENBQUNOLEtBQUs7b0JBQ1JKLE9BQU8sSUFBSUwsTUFBTTtvQkFDakI7Z0JBQ0Y7Z0JBRUEsc0JBQXNCO2dCQUN0QlMsSUFBSU8sU0FBUyxDQUFDTCxLQUFLLEdBQUc7Z0JBRXRCLGdDQUFnQztnQkFDaEMsTUFBTU0sWUFBWVIsSUFBSVMsWUFBWSxDQUFDLEdBQUcsR0FBR1osT0FB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OzRCQUN0QlE7NEJBQ0E4Qjt3QkFDRjtvQkFDRjtvQkFDQTtnQkFDRjtZQUNGO1FBQ0Y7UUFFQTdHLFFBQVFDLEdBQUcsQ0FBQyxTQUFzQixPQUFiMkQsTUFBTWxDLE1BQU0sRUFBQztRQUNsQyxPQUFPa0M7SUFDVDtJQUVBLE1BQU15RCxVQUF5QjtRQUM3QixJQUFJLElBQUksQ0FBQ25ILE1BQU0sRUFBRTtZQUNmLE1BQU0sSUFBSSxDQUFDQSxNQUFNLENBQUNvSCxTQUFTO1lBQzNCLElBQUksQ0FBQ3BILE1BQU0sR0FBRztZQUNkLElBQUksQ0FBQ0gsYUFBYSxHQUFHO1lBQ3JCQyxRQUFRQyxHQUFHLENBQUM7UUFDZDtJQUNGOzthQTVhUUMsU0FBa0M7YUFDbENILGdCQUFnQjs7QUE0YTFCO0FBRUEsNEJBQTRCO0FBQ3JCLE1BQU13SCxhQUFhLElBQUkxSCxhQUFhIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXG5hdGhhXFxPbmVEcml2ZVxcRGVza3RvcFxcTW9uZXlRdWVzdFYzXFxwYWNrYWdlc1xcd2Vic2l0ZVxcc2VydmljZXNcXG9jclNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlV29ya2VyIH0gZnJvbSAndGVzc2VyYWN0LmpzJztcblxuZXhwb3J0IGludGVyZmFjZSBPQ1JSZXN1bHQge1xuICB0ZXh0OiBzdHJpbmc7XG4gIGNvbmZpZGVuY2U6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXJzZWRSZWNlaXB0IHtcbiAgbWVyY2hhbnQ6IHN0cmluZztcbiAgYW1vdW50OiBudW1iZXI7XG4gIGRhdGU6IHN0cmluZztcbiAgaXRlbXM6IEFycmF5PHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgcHJpY2U6IG51bWJlcjtcbiAgICBxdWFudGl0eT86IG51bWJlcjtcbiAgfT47XG4gIHJhd1RleHQ6IHN0cmluZztcbiAgY29uZmlkZW5jZTogbnVtYmVyO1xufVxuXG5jbGFzcyBPQ1JTZXJ2aWNlIHtcbiAgcHJpdmF0ZSB3b3JrZXI6IFRlc3NlcmFjdC5Xb3JrZXIgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBpc0luaXRpYWxpemVkID0gZmFsc2U7XG5cbiAgYXN5bmMgaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAodGhpcy5pc0luaXRpYWxpemVkKSByZXR1cm47XG5cbiAgICB0cnkge1xuICAgICAgY29uc29sZS5sb2coJ/CflI0gSW5pdGlhbGl6aW5nIE9DUiBlbmdpbmUuLi4nKTtcbiAgICAgIHRoaXMud29ya2VyID0gYXdhaXQgY3JlYXRlV29ya2VyKCdlbmcnKTtcblxuICAgICAgLy8gQ29uZmlndXJlIFRlc3NlcmFjdCBmb3IgYmV0dGVyIHJlY2VpcHQgcmVhZGluZ1xuICAgICAgYXdhaXQgdGhpcy53b3JrZXIuc2V0UGFyYW1ldGVycyh7XG4gICAgICAgICd0ZXNzZWRpdF9jaGFyX3doaXRlbGlzdCc6ICcwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ei4sJC86LSMgJyxcbiAgICAgICAgJ3Rlc3NlZGl0X3BhZ2VzZWdfbW9kZSc6ICc2JywgLy8gU2luZ2xlIHVuaWZvcm0gYmxvY2sgb2YgdGV4dFxuICAgICAgICAncHJlc2VydmVfaW50ZXJ3b3JkX3NwYWNlcyc6ICcxJ1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuaXNJbml0aWFsaXplZCA9IHRydWU7XG4gICAgICBjb25zb2xlLmxvZygn4pyFIE9DUiBlbmdpbmUgaW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5Jyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBGYWlsZWQgdG8gaW5pdGlhbGl6ZSBPQ1IgZW5naW5lOicsIGVycm9yKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGluaXRpYWxpemUgT0NSIGVuZ2luZScpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgcHJlcHJvY2Vzc0ltYWdlKGltYWdlRmlsZTogRmlsZSk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcblxuICAgICAgaW1nLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgLy8gU2V0IGNhbnZhcyBzaXplXG4gICAgICAgIGNhbnZhcy53aWR0aCA9IGltZy53aWR0aDtcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IGltZy5oZWlnaHQ7XG5cbiAgICAgICAgaWYgKCFjdHgpIHtcbiAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdDb3VsZCBub3QgZ2V0IGNhbnZhcyBjb250ZXh0JykpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERyYXcgb3JpZ2luYWwgaW1hZ2VcbiAgICAgICAgY3R4LmRyYXdJbWFnZShpbWcsIDAsIDApO1xuXG4gICAgICAgIC8vIEdldCBpbWFnZSBkYXRhIGZvciBwcm9jZXNzaW5nXG4gICAgICAgIGNvbnN0IGltYWdlRGF0YSA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgY29uc3QgZGF0YSA9IGltYWdlRGF0YS5kYXRhO1xuXG4gICAgICAgIC8vIENvbnZlcnQgdG8gZ3JheXNjYWxlIGFuZCBpbmNyZWFzZSBjb250cmFzdFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpICs9IDQpIHtcbiAgICAgICAgICBjb25zdCBncmF5ID0gTWF0aC5yb3VuZCgwLjI5OSAqIGRhdGFbaV0gKyAwLjU4NyAqIGRhdGFbaSArIDFdICsgMC4xMTQgKiBkYXRhW2kgKyAyXSk7XG5cbiAgICAgICAgICAvLyBJbmNyZWFzZSBjb250cmFzdFxuICAgICAgICAgIGNvbnN0IGNvbnRyYXN0ID0gMS41O1xuICAgICAgICAgIGNvbnN0IGZhY3RvciA9ICgyNTkgKiAoY29udHJhc3QgKyAyNTUpKSAvICgyNTUgKiAoMjU5IC0gY29udHJhc3QpKTtcbiAgICAgICAgICBjb25zdCBlbmhhbmNlZCA9IE1hdGgubWluKDI1NSwgTWF0aC5tYXgoMCwgZmFjdG9yICogKGdyYXkgLSAxMjgpICsgMTI4KSk7XG5cbiAgICAgICAgICBkYXRhW2ldID0gZW5oYW5jZWQ7ICAgICAvLyBSZWRcbiAgICAgICAgICBkYXRhW2kgKyAxXSA9IGVuaGFuY2VkOyAvLyBHcmVlblxuICAgICAgICAgIGRhdGFbaSArIDJdID0gZW5oYW5jZWQ7IC8vIEJsdWVcbiAgICAgICAgICAvLyBBbHBoYSBzdGF5cyB0aGUgc2FtZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gUHV0IHRoZSBwcm9jZXNzZWQgaW1hZ2UgZGF0YSBiYWNrXG4gICAgICAgIGN0eC5wdXRJbWFnZURhdGEoaW1hZ2VEYXRhLCAwLCAwKTtcblxuICAgICAgICAvLyBDb252ZXJ0IHRvIGRhdGEgVVJMXG4gICAgICAgIHJlc29sdmUoY2FudmFzLnRvRGF0YVVSTCgnaW1hZ2UvcG5nJykpO1xuICAgICAgfTtcblxuICAgICAgaW1nLm9uZXJyb3IgPSAoKSA9PiByZWplY3QobmV3IEVycm9yKCdGYWlsZWQgdG8gbG9hZCBpbWFnZScpKTtcbiAgICAgIGltZy5zcmMgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGltYWdlRmlsZSk7XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBwcm9jZXNzUmVjZWlwdEltYWdlKGltYWdlRmlsZTogRmlsZSk6IFByb21pc2U8T0NSUmVzdWx0PiB7XG4gICAgaWYgKCF0aGlzLndvcmtlciB8fCAhdGhpcy5pc0luaXRpYWxpemVkKSB7XG4gICAgICBhd2FpdCB0aGlzLmluaXRpYWxpemUoKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc29sZS5sb2coJ/Cfk4QgUHJlcHJvY2Vzc2luZyByZWNlaXB0IGltYWdlLi4uJyk7XG4gICAgICBjb25zdCBwcmVwcm9jZXNzZWRJbWFnZSA9IGF3YWl0IHRoaXMucHJlcHJvY2Vzc0ltYWdlKGltYWdlRmlsZSk7XG5cbiAgICAgIGNvbnNvbGUubG9nKCfwn5SNIFByb2Nlc3NpbmcgcmVjZWlwdCBpbWFnZSB3aXRoIE9DUi4uLicpO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy53b3JrZXIhLnJlY29nbml6ZShwcmVwcm9jZXNzZWRJbWFnZSk7XG5cbiAgICAgIGNvbnNvbGUubG9nKCfinIUgT0NSIGNvbXBsZXRlZCcsIHtcbiAgICAgICAgY29uZmlkZW5jZTogcmVzdWx0LmRhdGEuY29uZmlkZW5jZSxcbiAgICAgICAgdGV4dExlbmd0aDogcmVzdWx0LmRhdGEudGV4dC5sZW5ndGgsXG4gICAgICAgIHJhd1RleHQ6IHJlc3VsdC5kYXRhLnRleHQuc3Vic3RyaW5nKDAsIDIwMCkgKyAnLi4uJ1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRleHQ6IHJlc3VsdC5kYXRhLnRleHQsXG4gICAgICAgIGNvbmZpZGVuY2U6IHJlc3VsdC5kYXRhLmNvbmZpZGVuY2VcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBPQ1IgcHJvY2Vzc2luZyBmYWlsZWQ6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gcHJvY2VzcyBpbWFnZSB3aXRoIE9DUicpO1xuICAgIH1cbiAgfVxuXG4gIHBhcnNlUmVjZWlwdFRleHQob2NyVGV4dDogc3RyaW5nLCBjb25maWRlbmNlOiBudW1iZXIpOiBQYXJzZWRSZWNlaXB0IHtcbiAgICBjb25zb2xlLmxvZygn8J+UjSBQYXJzaW5nIHJlY2VpcHQgdGV4dC4uLicpO1xuICAgIGNvbnNvbGUubG9nKCdSYXcgT0NSIHRleHQ6Jywgb2NyVGV4dCk7XG5cbiAgICBjb25zdCBsaW5lcyA9IG9jclRleHQuc3BsaXQoJ1xcbicpLm1hcChsaW5lID0+IGxpbmUudHJpbSgpKS5maWx0ZXIobGluZSA9PiBsaW5lLmxlbmd0aCA+IDApO1xuXG4gICAgLy8gRXh0cmFjdCBtZXJjaGFudCBuYW1lICh1c3VhbGx5IGZpcnN0IG9yIHNlY29uZCBsaW5lKVxuICAgIGNvbnN0IG1lcmNoYW50ID0gdGhpcy5leHRyYWN0TWVyY2hhbnQobGluZXMpO1xuXG4gICAgLy8gRXh0cmFjdCBsaW5lIGl0ZW1zIEZJUlNUIChpbmNsdWRpbmcgdGF4KVxuICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5leHRyYWN0SXRlbXMobGluZXMpO1xuXG4gICAgLy8gRXh0cmFjdCB0b3RhbCBhbW91bnQgdXNpbmcgdGhlIG5ldyBydWxlXG4gICAgY29uc3QgYW1vdW50ID0gdGhpcy5leHRyYWN0VmFsaWRhdGVkVG90YWwobGluZXMsIGl0ZW1zKTtcblxuICAgIC8vIEV4dHJhY3QgZGF0ZVxuICAgIGNvbnN0IGRhdGUgPSB0aGlzLmV4dHJhY3REYXRlKGxpbmVzKTtcblxuICAgIGNvbnN0IHBhcnNlZDogUGFyc2VkUmVjZWlwdCA9IHtcbiAgICAgIG1lcmNoYW50LFxuICAgICAgYW1vdW50LFxuICAgICAgZGF0ZSxcbiAgICAgIGl0ZW1zLFxuICAgICAgcmF3VGV4dDogb2NyVGV4dCxcbiAgICAgIGNvbmZpZGVuY2U6IE1hdGgubWF4KGNvbmZpZGVuY2UgKiAwLjgsIDYwKSAvLyBBZGp1c3QgY29uZmlkZW5jZSBmb3IgcGFyc2luZyB1bmNlcnRhaW50eVxuICAgIH07XG5cbiAgICBjb25zb2xlLmxvZygn4pyFIFJlY2VpcHQgcGFyc2VkIHN1Y2Nlc3NmdWxseTonLCBwYXJzZWQpO1xuICAgIHJldHVybiBwYXJzZWQ7XG4gIH1cblxuICBwcml2YXRlIGV4dHJhY3RNZXJjaGFudChsaW5lczogc3RyaW5nW10pOiBzdHJpbmcge1xuICAgIC8vIENvbW1vbiBtZXJjaGFudCBwYXR0ZXJucyB0byBsb29rIGZvclxuICAgIGNvbnN0IG1lcmNoYW50UGF0dGVybnMgPSBbXG4gICAgICAvXihbQS1aYS16XFxzJicuLV17Myw0MH0pJC8sXG4gICAgICAvXihbQS1aXFxzJicuLV17Myw0MH0pXFxzK1NUT1JFLyxcbiAgICAgIC9eKFtBLVpcXHMmJy4tXXszLDQwfSlcXHMrTUFSS0VULyxcbiAgICAgIC9eKFtBLVpcXHMmJy4tXXszLDQwfSlcXHMrSU5DL1xuICAgIF07XG5cbiAgICAvLyBMb29rIGZvciBtZXJjaGFudCBuYW1lIGluIGZpcnN0IDcgbGluZXNcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IE1hdGgubWluKDcsIGxpbmVzLmxlbmd0aCk7IGkrKykge1xuICAgICAgY29uc3QgbGluZSA9IGxpbmVzW2ldLnRyaW0oKTtcblxuICAgICAgLy8gU2tpcCBvYnZpb3VzbHkgbm9uLW1lcmNoYW50IGxpbmVzXG4gICAgICBpZiAobGluZS5tYXRjaCgvXlxcZCsvKSB8fCBsaW5lLmluY2x1ZGVzKCdSRUNFSVBUJykgfHwgbGluZS5pbmNsdWRlcygnSU5WT0lDRScpIHx8XG4gICAgICAgICAgbGluZS5pbmNsdWRlcygnIycpIHx8IGxpbmUuaW5jbHVkZXMoJ1RFTCcpIHx8IGxpbmUuaW5jbHVkZXMoJ1dXVycpIHx8XG4gICAgICAgICAgbGluZS5pbmNsdWRlcygnQCcpIHx8IGxpbmUuaW5jbHVkZXMoJy5DT00nKSB8fCBsaW5lLmluY2x1ZGVzKCdTVFJFRVQnKSB8fFxuICAgICAgICAgIGxpbmUuaW5jbHVkZXMoJ0FWRScpIHx8IGxpbmUuaW5jbHVkZXMoJ0JMVkQnKSB8fCBsaW5lLmluY2x1ZGVzKCdSRCcpIHx8XG4gICAgICAgICAgbGluZS5sZW5ndGggPCAzIHx8IGxpbmUubGVuZ3RoID4gNTApIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIFRyeSBtZXJjaGFudCBwYXR0ZXJuc1xuICAgICAgZm9yIChjb25zdCBwYXR0ZXJuIG9mIG1lcmNoYW50UGF0dGVybnMpIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBsaW5lLm1hdGNoKHBhdHRlcm4pO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICByZXR1cm4gbWF0Y2hbMV0udHJpbSgpLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSWYgbm8gcGF0dGVybiBtYXRjaGVzIGJ1dCBsaW5lIGxvb2tzIGxpa2UgbWVyY2hhbnQgbmFtZVxuICAgICAgaWYgKGxpbmUubWF0Y2goL15bQS1aYS16XFxzJicuLV0rJC8pICYmIGxpbmUubGVuZ3RoID49IDMgJiYgbGluZS5sZW5ndGggPD0gNDApIHtcbiAgICAgICAgLy8gQ2hlY2sgaWYgaXQncyBub3QgYSBjb21tb24gbm9uLW1lcmNoYW50IHdvcmRcbiAgICAgICAgY29uc3Qgbm9uTWVyY2hhbnRXb3JkcyA9IFsnVEhBTksnLCAnWU9VJywgJ1ZJU0lUJywgJ0FHQUlOJywgJ0NVU1RPTUVSJywgJ0NPUFknXTtcbiAgICAgICAgaWYgKCFub25NZXJjaGFudFdvcmRzLnNvbWUod29yZCA9PiBsaW5lLmluY2x1ZGVzKHdvcmQpKSkge1xuICAgICAgICAgIHJldHVybiBsaW5lLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gJ1VOS05PV04gTUVSQ0hBTlQnO1xuICB9XG5cbiAgcHJpdmF0ZSBleHRyYWN0VmFsaWRhdGVkVG90YWwobGluZXM6IHN0cmluZ1tdLCBpdGVtczogQXJyYXk8eyBuYW1lOiBzdHJpbmc7IHByaWNlOiBudW1iZXI7IHF1YW50aXR5PzogbnVtYmVyIH0+KTogbnVtYmVyIHtcbiAgICBjb25zb2xlLmxvZygn8J+UjSBMb29raW5nIGZvciB0b3RhbCB0aGF0IG1hdGNoZXMgaXRlbSBzdW0uLi4nKTtcblxuICAgIC8vIENhbGN1bGF0ZSBleHBlY3RlZCB0b3RhbCBmcm9tIGl0ZW1zXG4gICAgY29uc3QgaXRlbXNUb3RhbCA9IGl0ZW1zLnJlZHVjZSgoc3VtLCBpdGVtKSA9PiBzdW0gKyBpdGVtLnByaWNlLCAwKTtcbiAgICBjb25zb2xlLmxvZyhgSXRlbXMgc3VtIHRvOiAkJHtpdGVtc1RvdGFsLnRvRml4ZWQoMil9YCk7XG5cbiAgICAvLyBMb29rIHNwZWNpZmljYWxseSBmb3IgXCJUb3RhbFwiIGZvbGxvd2VkIGJ5IGRvbGxhciBhbW91bnRcbiAgICBjb25zdCB0b3RhbFBhdHRlcm5zID0gW1xuICAgICAgL1RPVEFMXFxzK1skXT8oXFxkK1xcLlxcZHsyfSkvaSwgICAgICAgICAgIC8vIFwiVE9UQUwgJDEyLjM0XCJcbiAgICAgIC9UT1RBTFxccyo6XFxzKlskXT8oXFxkK1xcLlxcZHsyfSkvaSwgICAgICAvLyBcIlRPVEFMOiAkMTIuMzRcIlxuICAgICAgL1RPVEFMLio/WyRdKFxcZCtcXC5cXGR7Mn0pL2ksICAgICAgICAgICAvLyBcIlRPVEFMIHh4eCAkMTIuMzRcIlxuICAgIF07XG5cbiAgICBjb25zdCBmb3VuZFRvdGFsczogQXJyYXk8eyBhbW91bnQ6IG51bWJlcjsgbGluZTogc3RyaW5nIH0+ID0gW107XG5cbiAgICAvLyBGaW5kIGFsbCBwb3RlbnRpYWwgdG90YWxzXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgbGluZSA9IGxpbmVzW2ldLnRyaW0oKTtcblxuICAgICAgZm9yIChjb25zdCBwYXR0ZXJuIG9mIHRvdGFsUGF0dGVybnMpIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBsaW5lLm1hdGNoKHBhdHRlcm4pO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICBjb25zdCBhbW91bnQgPSBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcbiAgICAgICAgICBpZiAoIWlzTmFOKGFtb3VudCkgJiYgYW1vdW50ID4gMCkge1xuICAgICAgICAgICAgZm91bmRUb3RhbHMucHVzaCh7IGFtb3VudCwgbGluZSB9KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBGb3VuZCBwb3RlbnRpYWwgdG90YWw6ICQke2Ftb3VudH0gaW4gXCIke2xpbmV9XCJgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiB3ZSBoYXZlIGl0ZW1zLCB0cnkgdG8gbWF0Y2ggdG90YWwgdG8gaXRlbXMgc3VtXG4gICAgaWYgKGl0ZW1zVG90YWwgPiAwICYmIGZvdW5kVG90YWxzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnNvbGUubG9nKCdWYWxpZGF0aW5nIHRvdGFscyBhZ2FpbnN0IGl0ZW1zIHN1bS4uLicpO1xuXG4gICAgICBmb3IgKGNvbnN0IHRvdGFsIG9mIGZvdW5kVG90YWxzKSB7XG4gICAgICAgIGNvbnN0IGRpZmZlcmVuY2UgPSBNYXRoLmFicyh0b3RhbC5hbW91bnQgLSBpdGVtc1RvdGFsKTtcbiAgICAgICAgY29uc29sZS5sb2coYFRvdGFsICQke3RvdGFsLmFtb3VudH0gdnMgSXRlbXMgJCR7aXRlbXNUb3RhbC50b0ZpeGVkKDIpfSAtIGRpZmZlcmVuY2U6ICQke2RpZmZlcmVuY2UudG9GaXhlZCgyKX1gKTtcblxuICAgICAgICAvLyBBbGxvdyBzbWFsbCByb3VuZGluZyBkaWZmZXJlbmNlcyAowrEkMC4wNSlcbiAgICAgICAgaWYgKGRpZmZlcmVuY2UgPD0gMC4wNSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGDinIUgRm91bmQgbWF0Y2hpbmcgdG90YWw6ICQke3RvdGFsLmFtb3VudH1gKTtcbiAgICAgICAgICByZXR1cm4gdG90YWwuYW1vdW50O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIElmIG5vIGV4YWN0IG1hdGNoLCBsb29rIGZvciBjbG9zZXN0IHRvdGFsIHRoYXQncyByZWFzb25hYmxlXG4gICAgICBjb25zdCBzb3J0ZWRCeUNsb3NlbmVzcyA9IGZvdW5kVG90YWxzLnNvcnQoKGEsIGIpID0+XG4gICAgICAgIE1hdGguYWJzKGEuYW1vdW50IC0gaXRlbXNUb3RhbCkgLSBNYXRoLmFicyhiLmFtb3VudCAtIGl0ZW1zVG90YWwpXG4gICAgICApO1xuXG4gICAgICBjb25zdCBjbG9zZXN0ID0gc29ydGVkQnlDbG9zZW5lc3NbMF07XG4gICAgICBpZiAoY2xvc2VzdCAmJiBNYXRoLmFicyhjbG9zZXN0LmFtb3VudCAtIGl0ZW1zVG90YWwpIDw9IGl0ZW1zVG90YWwgKiAwLjEpIHsgLy8gV2l0aGluIDEwJVxuICAgICAgICBjb25zb2xlLmxvZyhg4pqg77iPIFVzaW5nIGNsb3Nlc3QgdG90YWw6ICQke2Nsb3Nlc3QuYW1vdW50fSAoJHtNYXRoLmFicyhjbG9zZXN0LmFtb3VudCAtIGl0ZW1zVG90YWwpLnRvRml4ZWQoMil9IGRpZmZlcmVuY2UpYCk7XG4gICAgICAgIHJldHVybiBjbG9zZXN0LmFtb3VudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGYWxsYmFjazogdXNlIGFueSBcIlRvdGFsXCIgd2UgZm91bmRcbiAgICBpZiAoZm91bmRUb3RhbHMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc29sZS5sb2coYOKaoO+4jyBVc2luZyBmaXJzdCB0b3RhbCBmb3VuZDogJCR7Zm91bmRUb3RhbHNbMF0uYW1vdW50fWApO1xuICAgICAgcmV0dXJuIGZvdW5kVG90YWxzWzBdLmFtb3VudDtcbiAgICB9XG5cbiAgICAvLyBGaW5hbCBmYWxsYmFjazogdXNlIGl0ZW1zIHN1bSBpZiB3ZSBoYXZlIGl0ZW1zXG4gICAgaWYgKGl0ZW1zVG90YWwgPiAwKSB7XG4gICAgICBjb25zb2xlLmxvZyhg4pqg77iPIE5vIHRvdGFsIGZvdW5kLCB1c2luZyBpdGVtcyBzdW06ICQke2l0ZW1zVG90YWwudG9GaXhlZCgyKX1gKTtcbiAgICAgIHJldHVybiBpdGVtc1RvdGFsO1xuICAgIH1cblxuICAgIC8vIExhc3QgcmVzb3J0OiB1c2Ugb2xkIG1ldGhvZFxuICAgIGNvbnNvbGUubG9nKCfimqDvuI8gRmFsbGluZyBiYWNrIHRvIG9sZCB0b3RhbCBleHRyYWN0aW9uIG1ldGhvZCcpO1xuICAgIHJldHVybiB0aGlzLmV4dHJhY3RUb3RhbEFtb3VudChsaW5lcyk7XG4gIH1cblxuICBwcml2YXRlIGV4dHJhY3RUb3RhbEFtb3VudChsaW5lczogc3RyaW5nW10pOiBudW1iZXIge1xuICAgIC8vIEVuaGFuY2VkIHRvdGFsIGFtb3VudCBwYXR0ZXJuc1xuICAgIGNvbnN0IHRvdGFsUGF0dGVybnMgPSBbXG4gICAgICAvVE9UQUwuKj9bJF0/KFxcZCtcXC4/XFxkezJ9KS9pLFxuICAgICAgL0FNT1VOVFxccytEVUUuKj9bJF0/KFxcZCtcXC4/XFxkezJ9KS9pLFxuICAgICAgL0JBTEFOQ0UuKj9bJF0/KFxcZCtcXC4/XFxkezJ9KS9pLFxuICAgICAgL0dSQU5EXFxzK1RPVEFMLio/WyRdPyhcXGQrXFwuP1xcZHsyfSkvaSxcbiAgICAgIC9GSU5BTFxccytUT1RBTC4qP1skXT8oXFxkK1xcLj9cXGR7Mn0pL2ksXG4gICAgICAvWyRdKFxcZCtcXC5cXGR7Mn0pXFxzKiQvLCAvLyBMaW5lIGVuZGluZyB3aXRoIGN1cnJlbmN5IGFtb3VudFxuICAgICAgLyhcXGQrXFwuXFxkezJ9KVxccypUT1RBTC9pLFxuICAgICAgL1RPVEFMXFxzK1skXT8oXFxkK1xcLlxcZHsyfSkvaSxcbiAgICAgIC9bJF1cXHMqKFxcZCtcXC5cXGR7Mn0pXFxzKlRPVEFML2lcbiAgICBdO1xuXG4gICAgY29uc29sZS5sb2coJ/CflI0gTG9va2luZyBmb3IgdG90YWwgYW1vdW50IGluIGxpbmVzOicsIGxpbmVzLnNsaWNlKC0xMCkpO1xuXG4gICAgLy8gU2VhcmNoIGZyb20gYm90dG9tIHVwIGFzIHRvdGFscyBhcmUgdXN1YWxseSBhdCB0aGUgZW5kXG4gICAgZm9yIChsZXQgaSA9IGxpbmVzLmxlbmd0aCAtIDE7IGkgPj0gTWF0aC5tYXgoMCwgbGluZXMubGVuZ3RoIC0gMTUpOyBpLS0pIHtcbiAgICAgIGNvbnN0IGxpbmUgPSBsaW5lc1tpXS50cmltKCk7XG5cbiAgICAgIGlmIChsaW5lLmxlbmd0aCA9PT0gMCkgY29udGludWU7XG5cbiAgICAgIGNvbnNvbGUubG9nKGBDaGVja2luZyBsaW5lICR7aX06IFwiJHtsaW5lfVwiYCk7XG5cbiAgICAgIGZvciAoY29uc3QgcGF0dGVybiBvZiB0b3RhbFBhdHRlcm5zKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gbGluZS5tYXRjaChwYXR0ZXJuKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgY29uc3QgYW1vdW50ID0gcGFyc2VGbG9hdChtYXRjaFsxXSk7XG4gICAgICAgICAgY29uc29sZS5sb2coYEZvdW5kIHBvdGVudGlhbCB0b3RhbDogJHthbW91bnR9IGZyb20gcGF0dGVybjogJHtwYXR0ZXJufWApO1xuICAgICAgICAgIGlmICghaXNOYU4oYW1vdW50KSAmJiBhbW91bnQgPiAwICYmIGFtb3VudCA8IDEwMDAwKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhg4pyFIFVzaW5nIHRvdGFsIGFtb3VudDogJHthbW91bnR9YCk7XG4gICAgICAgICAgICByZXR1cm4gYW1vdW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKCfimqDvuI8gTm8gY2xlYXIgdG90YWwgZm91bmQsIGxvb2tpbmcgZm9yIGxhcmdlc3QgYW1vdW50Jyk7XG5cbiAgICAvLyBJZiBubyBjbGVhciB0b3RhbCBmb3VuZCwgbG9vayBmb3IgbGFyZ2VzdCByZWFzb25hYmxlIGFtb3VudFxuICAgIGNvbnN0IGFtb3VudHM6IG51bWJlcltdID0gW107XG4gICAgbGluZXMuZm9yRWFjaCgobGluZSwgaW5kZXgpID0+IHtcbiAgICAgIC8vIExvb2sgZm9yIG1vbmV5IGFtb3VudHM6ICRYLlhYIG9yIFguWFhcbiAgICAgIGNvbnN0IG1hdGNoZXMgPSBsaW5lLm1hdGNoKC9bJF0/KFxcZCtcXC5cXGR7Mn0pL2cpIHx8IFtdO1xuICAgICAgbWF0Y2hlcy5mb3JFYWNoKG1hdGNoID0+IHtcbiAgICAgICAgY29uc3QgYW1vdW50ID0gcGFyc2VGbG9hdChtYXRjaC5yZXBsYWNlKCckJywgJycpKTtcbiAgICAgICAgaWYgKCFpc05hTihhbW91bnQpICYmIGFtb3VudCA+IDAgJiYgYW1vdW50IDwgMTAwMDApIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgRm91bmQgYW1vdW50ICR7YW1vdW50fSBvbiBsaW5lICR7aW5kZXh9OiBcIiR7bGluZX1cImApO1xuICAgICAgICAgIGFtb3VudHMucHVzaChhbW91bnQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGNvbnN0IG1heEFtb3VudCA9IGFtb3VudHMubGVuZ3RoID4gMCA/IE1hdGgubWF4KC4uLmFtb3VudHMpIDogMDtcbiAgICBjb25zb2xlLmxvZyhgVXNpbmcgbGFyZ2VzdCBhbW91bnQgZm91bmQ6ICR7bWF4QW1vdW50fWApO1xuICAgIHJldHVybiBtYXhBbW91bnQ7XG4gIH1cblxuICBwcml2YXRlIGV4dHJhY3REYXRlKGxpbmVzOiBzdHJpbmdbXSk6IHN0cmluZyB7XG4gICAgY29uc3QgZGF0ZVBhdHRlcm5zID0gW1xuICAgICAgLyhcXGR7MSwyfVxcL1xcZHsxLDJ9XFwvXFxkezIsNH0pLyxcbiAgICAgIC8oXFxkezEsMn0tXFxkezEsMn0tXFxkezIsNH0pLyxcbiAgICAgIC8oXFxkezR9LVxcZHsyfS1cXGR7Mn0pLyxcbiAgICAgIC8oSmFufEZlYnxNYXJ8QXByfE1heXxKdW58SnVsfEF1Z3xTZXB8T2N0fE5vdnxEZWMpLio/KFxcZHsxLDJ9KSw/XFxzKihcXGR7NH0pL2lcbiAgICBdO1xuXG4gICAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVzKSB7XG4gICAgICBmb3IgKGNvbnN0IHBhdHRlcm4gb2YgZGF0ZVBhdHRlcm5zKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gbGluZS5tYXRjaChwYXR0ZXJuKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFRyeSB0byBwYXJzZSBhbmQgbm9ybWFsaXplIHRoZSBkYXRlXG4gICAgICAgICAgICBjb25zdCBkYXRlU3RyID0gbWF0Y2hbMF07XG4gICAgICAgICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoZGF0ZVN0cik7XG4gICAgICAgICAgICBpZiAoIWlzTmFOKGRhdGUuZ2V0VGltZSgpKSkge1xuICAgICAgICAgICAgICByZXR1cm4gZGF0ZS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF07IC8vIFJldHVybiBZWVlZLU1NLUREIGZvcm1hdFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIERlZmF1bHQgdG8gdG9kYXkgaWYgbm8gZGF0ZSBmb3VuZFxuICAgIHJldHVybiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXTtcbiAgfVxuXG4gIHByaXZhdGUgZXh0cmFjdEl0ZW1zKGxpbmVzOiBzdHJpbmdbXSk6IEFycmF5PHsgbmFtZTogc3RyaW5nOyBwcmljZTogbnVtYmVyOyBxdWFudGl0eT86IG51bWJlciB9PiB7XG4gICAgY29uc3QgaXRlbXM6IEFycmF5PHsgbmFtZTogc3RyaW5nOyBwcmljZTogbnVtYmVyOyBxdWFudGl0eT86IG51bWJlciB9PiA9IFtdO1xuXG4gICAgY29uc29sZS5sb2coJ/CflI0gRXh0cmFjdGluZyBpdGVtcyBmcm9tIGxpbmVzLi4uJyk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBsaW5lID0gbGluZXNbaV0udHJpbSgpO1xuICAgICAgaWYgKGxpbmUubGVuZ3RoID09PSAwKSBjb250aW51ZTtcblxuICAgICAgLy8gRW5oYW5jZWQgaXRlbSBwYXR0ZXJuc1xuICAgICAgY29uc3QgaXRlbVBhdHRlcm5zID0gW1xuICAgICAgICAvXihcXGQrKVxccysoLis/KVxccytbJF0/KFxcZCtcXC5cXGR7Mn0pJC8sICAgICAgICAvLyBcIjIgQkFOQU5BUyAkMy45OVwiXG4gICAgICAgIC9eKFxcZCspXFxzKyguKz8pXFxzKyhcXGQrXFwuXFxkezJ9KVxccyokLywgICAgICAgICAvLyBcIjIgQkFOQU5BUyAzLjk5XCJcbiAgICAgICAgL14oLis/KVxcc3syLH1bJF0/KFxcZCtcXC5cXGR7Mn0pJC8sICAgICAgICAgICAgIC8vIFwiQkFOQU5BUyAgICAkMy45OVwiIChtdWx0aXBsZSBzcGFjZXMpXG4gICAgICAgIC9eKC4rPylcXHMrWyRdKFxcZCtcXC5cXGR7Mn0pJC8sICAgICAgICAgICAgICAgICAvLyBcIkJBTkFOQVMgJDMuOTlcIlxuICAgICAgICAvXiguKz8pXFxzKyhcXGQrXFwuXFxkezJ9KVxccyokLywgICAgICAgICAgICAgICAgIC8vIFwiQkFOQU5BUyAzLjk5XCJcbiAgICAgICAgL14oLnszLDMwfT8pXFxzKyhcXGR7MSwzfVxcLlxcZHsyfSkkLyAgICAgICAgICAgIC8vIEdlbmVyaWM6IG5hbWUgZm9sbG93ZWQgYnkgcHJpY2VcbiAgICAgIF07XG5cbiAgICAgIGZvciAoY29uc3QgcGF0dGVybiBvZiBpdGVtUGF0dGVybnMpIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBsaW5lLm1hdGNoKHBhdHRlcm4pO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICBsZXQgcXVhbnRpdHk6IG51bWJlciB8IHVuZGVmaW5lZDtcbiAgICAgICAgICBsZXQgbmFtZTogc3RyaW5nO1xuICAgICAgICAgIGxldCBwcmljZTogbnVtYmVyO1xuXG4gICAgICAgICAgaWYgKG1hdGNoLmxlbmd0aCA9PT0gNCkge1xuICAgICAgICAgICAgLy8gUGF0dGVybiB3aXRoIHF1YW50aXR5XG4gICAgICAgICAgICBxdWFudGl0eSA9IHBhcnNlSW50KG1hdGNoWzFdKTtcbiAgICAgICAgICAgIG5hbWUgPSBtYXRjaFsyXS50cmltKCk7XG4gICAgICAgICAgICBwcmljZSA9IHBhcnNlRmxvYXQobWF0Y2hbM10pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBQYXR0ZXJuIHdpdGhvdXQgcXVhbnRpdHlcbiAgICAgICAgICAgIG5hbWUgPSBtYXRjaFsxXS50cmltKCk7XG4gICAgICAgICAgICBwcmljZSA9IHBhcnNlRmxvYXQobWF0Y2hbMl0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIENoZWNrIGlmIHRoaXMgaXMgYSB0YXggaXRlbSAoaW5jbHVkZSBpdCEpXG4gICAgICAgICAgY29uc3QgaXNUYXhJdGVtID0gL1RBWHxIU1R8R1NUfFBTVHxWQVQvaS50ZXN0KG5hbWUpIHx8IC9UQVh8SFNUfEdTVHxQU1R8VkFUL2kudGVzdChsaW5lKTtcblxuICAgICAgICAgIC8vIEVuaGFuY2VkIGZpbHRlcmluZyBmb3Igbm9uLWl0ZW0gbGluZXMgKGJ1dCBhbGxvdyB0YXggaXRlbXMpXG4gICAgICAgICAgY29uc3QgZXhjbHVkZVBhdHRlcm5zID0gW1xuICAgICAgICAgICAgL1RPVEFMfFNVQlRPVEFMfENIQU5HRXxCQUxBTkNFfFJFQ0VJUFR8U1RPUkV8VEhBTkt8VklTSVR8QUdBSU58Q1VTVE9NRVJ8Q09QWS9pLFxuICAgICAgICAgICAgL14oU1VCfEdSQU5EfEZJTkFMKS9pLFxuICAgICAgICAgICAgL1BBWU1FTlR8Q0FTSHxDUkVESVR8REVCSVR8Q0FSRC9pLFxuICAgICAgICAgICAgL14oREFURXxUSU1FfENMRVJLfENBU0hJRVIpL2ksXG4gICAgICAgICAgICAvXlxcZHsxLDJ9XFwvXFxkezEsMn1cXC9cXGR7Miw0fS8sIC8vIERhdGUgcGF0dGVybnNcbiAgICAgICAgICAgIC9eXFxkezJ9OlxcZHsyfS8sIC8vIFRpbWUgcGF0dGVybnNcbiAgICAgICAgICBdO1xuXG4gICAgICAgICAgY29uc3Qgc2hvdWxkRXhjbHVkZSA9ICFpc1RheEl0ZW0gJiYgKFxuICAgICAgICAgICAgZXhjbHVkZVBhdHRlcm5zLnNvbWUocGF0dGVybiA9PiBwYXR0ZXJuLnRlc3QobmFtZSkpIHx8XG4gICAgICAgICAgICBleGNsdWRlUGF0dGVybnMuc29tZShwYXR0ZXJuID0+IHBhdHRlcm4udGVzdChsaW5lKSlcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgaWYgKG5hbWUgJiYgIXNob3VsZEV4Y2x1ZGUgJiZcbiAgICAgICAgICAgICAgbmFtZS5sZW5ndGggPj0gMiAmJiBuYW1lLmxlbmd0aCA8PSA1MCAmJlxuICAgICAgICAgICAgICBwcmljZSA+IDAgJiYgcHJpY2UgPD0gMTAwMCAmJlxuICAgICAgICAgICAgICAhbmFtZS5tYXRjaCgvXlxcZCskLykgJiYgLy8gTm90IGp1c3QgbnVtYmVyc1xuICAgICAgICAgICAgICBuYW1lLm1hdGNoKC9bQS1aYS16XS8pICAvLyBDb250YWlucyBhdCBsZWFzdCBvbmUgbGV0dGVyXG4gICAgICAgICAgKSB7XG5cbiAgICAgICAgICAgIGNvbnN0IGl0ZW1UeXBlID0gaXNUYXhJdGVtID8gJyBbVEFYXScgOiAnJztcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGDinIUgRm91bmQgaXRlbTogXCIke25hbWV9XCIgLSAkJHtwcmljZX1gICsgKHF1YW50aXR5ID8gYCAocXR5OiAke3F1YW50aXR5fSlgIDogJycpICsgaXRlbVR5cGUpO1xuXG4gICAgICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgbmFtZTogbmFtZS50b1VwcGVyQ2FzZSgpLFxuICAgICAgICAgICAgICBwcmljZSxcbiAgICAgICAgICAgICAgcXVhbnRpdHlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKGBGb3VuZCAke2l0ZW1zLmxlbmd0aH0gaXRlbXMgdG90YWxgKTtcbiAgICByZXR1cm4gaXRlbXM7XG4gIH1cblxuICBhc3luYyBjbGVhbnVwKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICh0aGlzLndvcmtlcikge1xuICAgICAgYXdhaXQgdGhpcy53b3JrZXIudGVybWluYXRlKCk7XG4gICAgICB0aGlzLndvcmtlciA9IG51bGw7XG4gICAgICB0aGlzLmlzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgIGNvbnNvbGUubG9nKCfwn6e5IE9DUiBlbmdpbmUgY2xlYW5lZCB1cCcpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBFeHBvcnQgc2luZ2xldG9uIGluc3RhbmNlXG5leHBvcnQgY29uc3Qgb2NyU2VydmljZSA9IG5ldyBPQ1JTZXJ2aWNlKCk7Il0sIm5hbWVzIjpbImNyZWF0ZVdvcmtlciIsIk9DUlNlcnZpY2UiLCJpbml0aWFsaXplIiwiaXNJbml0aWFsaXplZCIsImNvbnNvbGUiLCJsb2ciLCJ3b3JrZXIiLCJzZXRQYXJhbWV0ZXJzIiwiZXJyb3IiLCJFcnJvciIsInByZXByb2Nlc3NJbWFnZSIsImltYWdlRmlsZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiY2FudmFzIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY3R4IiwiZ2V0Q29udGV4dCIsImltZyIsIkltYWdlIiwib25sb2FkIiwid2lkdGgiLCJoZWlnaHQiLCJkcmF3SW1hZ2UiLCJpbWFnZURhdGEiLCJnZXRJbWFnZURhdGEiLCJkYXRhIiwiaSIsImxlbmd0aCIsImdyYXkiLCJNYXRoIiwicm91bmQiLCJjb250cmFzdCIsImZhY3RvciIsImVuaGFuY2VkIiwibWluIiwibWF4IiwicHV0SW1hZ2VEYXRhIiwidG9EYXRhVVJMIiwib25lcnJvciIsInNyYyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInByb2Nlc3NSZWNlaXB0SW1hZ2UiLCJwcmVwcm9jZXNzZWRJbWFnZSIsInJlc3VsdCIsInJlY29nbml6ZSIsImNvbmZpZGVuY2UiLCJ0ZXh0TGVuZ3RoIiwidGV4dCIsInJhd1RleHQiLCJzdWJzdHJpbmciLCJwYXJzZVJlY2VpcHRUZXh0Iiwib2NyVGV4dCIsImxpbmVzIiwic3BsaXQiLCJtYXAiLCJsaW5lIiwidHJpbSIsImZpbHRlciIsIm1lcmNoYW50IiwiZXh0cmFjdE1lcmNoYW50IiwiaXRlbXMiLCJleHRyYWN0SXRlbXMiLCJhbW91bnQiLCJleHRyYWN0VmFsaWRhdGVkVG90YWwiLCJkYXRlIiwiZXh0cmFjdERhdGUiLCJwYXJzZWQiLCJtZXJjaGFudFBhdHRlcm5zIiwibWF0Y2giLCJpbmNsdWRlcyIsInBhdHRlcm4iLCJ0b1VwcGVyQ2FzZSIsIm5vbk1lcmNoYW50V29yZHMiLCJzb21lIiwid29yZCIsIml0ZW1zVG90YWwiLCJyZWR1Y2UiLCJzdW0iLCJpdGVtIiwicHJpY2UiLCJ0b0ZpeGVkIiwidG90YWxQYXR0ZXJucyIsImZvdW5kVG90YWxzIiwicGFyc2VGbG9hdCIsImlzTmFOIiwicHVzaCIsInRvdGFsIiwiZGlmZmVyZW5jZSIsImFicyIsInNvcnRlZEJ5Q2xvc2VuZXNzIiwic29ydCIsImEiLCJiIiwiY2xvc2VzdCIsImV4dHJhY3RUb3RhbEFtb3VudCIsInNsaWNlIiwiYW1vdW50cyIsImZvckVhY2giLCJpbmRleCIsIm1hdGNoZXMiLCJyZXBsYWNlIiwibWF4QW1vdW50IiwiZGF0ZVBhdHRlcm5zIiwiZGF0ZVN0ciIsIkRhdGUiLCJnZXRUaW1lIiwidG9JU09TdHJpbmciLCJlIiwiaXRlbVBhdHRlcm5zIiwicXVhbnRpdHkiLCJuYW1lIiwicGFyc2VJbnQiLCJpc1RheEl0ZW0iLCJ0ZXN0IiwiZXhjbHVkZVBhdHRlcm5zIiwic2hvdWxkRXhjbHVkZSIsIml0ZW1UeXBlIiwiY2xlYW51cCIsInRlcm1pbmF0ZSIsIm9jclNlcnZpY2UiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./services/ocrService.ts\n"));

/***/ })

});