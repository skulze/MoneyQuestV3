"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/receipts/page",{

/***/ "(app-pages-browser)/./services/ocrService.ts":
/*!********************************!*\
  !*** ./services/ocrService.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ocrService: () => (/* binding */ ocrService)\n/* harmony export */ });\n/* harmony import */ var tesseract_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tesseract.js */ \"(app-pages-browser)/../../node_modules/tesseract.js/src/index.js\");\n/* harmony import */ var tesseract_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(tesseract_js__WEBPACK_IMPORTED_MODULE_0__);\n\nclass OCRService {\n    async initialize() {\n        if (this.isInitialized) return;\n        try {\n            console.log('🔍 Initializing OCR engine...');\n            this.worker = await (0,tesseract_js__WEBPACK_IMPORTED_MODULE_0__.createWorker)('eng');\n            // Configure Tesseract for better receipt reading with more characters\n            await this.worker.setParameters({\n                'tessedit_char_whitelist': '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.,$/:-#%*()&@+ ',\n                'tessedit_pageseg_mode': '4',\n                'preserve_interword_spaces': '1',\n                'tessedit_create_hocr': '1',\n                'textord_min_linesize': '1.25',\n                'textord_tabfind_find_tables': '1',\n                'textord_tablefind_good_width': '3',\n                'textord_tabfind_show_vlines': '1' // Show vertical lines for debugging\n            });\n            this.isInitialized = true;\n            console.log('✅ OCR engine initialized successfully');\n        } catch (error) {\n            console.error('❌ Failed to initialize OCR engine:', error);\n            throw new Error('Failed to initialize OCR engine');\n        }\n    }\n    async preprocessImage(imageFile) {\n        return new Promise((resolve, reject)=>{\n            const canvas = document.createElement('canvas');\n            const ctx = canvas.getContext('2d');\n            const img = new Image();\n            img.onload = ()=>{\n                // Set canvas size\n                canvas.width = img.width;\n                canvas.height = img.height;\n                if (!ctx) {\n                    reject(new Error('Could not get canvas context'));\n                    return;\n                }\n                // Draw original image\n                ctx.drawImage(img, 0, 0);\n                // Get image data for processing\n                const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n                const data = imageData.data;\n                // Convert to grayscale and increase contrast\n                for(let i = 0; i < data.length; i += 4){\n                    const gray = Math.round(0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2]);\n                    // Increase contrast\n                    const contrast = 1.5;\n                    const factor = 259 * (contrast + 255) / (255 * (259 - contrast));\n                    const enhanced = Math.min(255, Math.max(0, factor * (gray - 128) + 128));\n                    data[i] = enhanced; // Red\n                    data[i + 1] = enhanced; // Green\n                    data[i + 2] = enhanced; // Blue\n                // Alpha stays the same\n                }\n                // Put the processed image data back\n                ctx.putImageData(imageData, 0, 0);\n                // Convert to data URL\n                resolve(canvas.toDataURL('image/png'));\n            };\n            img.onerror = ()=>reject(new Error('Failed to load image'));\n            img.src = URL.createObjectURL(imageFile);\n        });\n    }\n    reconstructAlignedText(ocrData) {\n        if (!ocrData.lines || ocrData.lines.length === 0) {\n            return ocrData.text || '';\n        }\n        console.log('🔧 Reconstructing aligned text from', ocrData.lines.length, 'lines');\n        const lines = [];\n        for (const line of ocrData.lines){\n            if (!line.words || line.words.length === 0) continue;\n            // Sort words by x position (left to right)\n            const sortedWords = [\n                ...line.words\n            ].sort((a, b)=>a.bbox.x0 - b.bbox.x0);\n            let lineText = '';\n            let lastX = 0;\n            for(let i = 0; i < sortedWords.length; i++){\n                const word = sortedWords[i];\n                const wordText = word.text.trim();\n                if (wordText.length === 0) continue;\n                // Calculate spacing needed based on x-position\n                const currentX = word.bbox.x0;\n                const wordWidth = word.bbox.x1 - word.bbox.x0;\n                if (i > 0) {\n                    // Calculate gap between this word and previous word\n                    const gap = currentX - lastX;\n                    const avgCharWidth = 10; // Approximate character width\n                    const spacesNeeded = Math.max(1, Math.floor(gap / avgCharWidth));\n                    // Add appropriate spacing (but cap it to prevent excessive spacing)\n                    lineText += ' '.repeat(Math.min(spacesNeeded, 20));\n                }\n                lineText += wordText;\n                lastX = word.bbox.x1;\n            }\n            if (lineText.trim().length > 0) {\n                lines.push(lineText);\n            }\n        }\n        const reconstructedText = lines.join('\\n');\n        console.log('✅ Reconstructed text with alignment:', reconstructedText.substring(0, 200) + '...');\n        return reconstructedText;\n    }\n    async processReceiptImage(imageFile) {\n        if (!this.worker || !this.isInitialized) {\n            await this.initialize();\n        }\n        try {\n            var _result_data_words;\n            console.log('📄 Preprocessing receipt image...');\n            const preprocessedImage = await this.preprocessImage(imageFile);\n            console.log('🔍 Processing receipt image with OCR...');\n            const result = await this.worker.recognize(preprocessedImage);\n            console.log('✅ OCR completed', {\n                confidence: result.data.confidence,\n                textLength: result.data.text.length,\n                wordsFound: ((_result_data_words = result.data.words) === null || _result_data_words === void 0 ? void 0 : _result_data_words.length) || 0\n            });\n            // Reconstruct text with better alignment using word positions\n            const alignedText = this.reconstructAlignedText(result.data);\n            return {\n                text: alignedText,\n                confidence: result.data.confidence\n            };\n        } catch (error) {\n            console.error('❌ OCR processing failed:', error);\n            throw new Error('Failed to process image with OCR');\n        }\n    }\n    parseReceiptText(ocrText, confidence) {\n        console.log('🔍 Parsing receipt text...');\n        console.log('Raw OCR text:', ocrText);\n        const lines = ocrText.split('\\n').map((line)=>line.trim()).filter((line)=>line.length > 0);\n        // Extract merchant name (usually first or second line)\n        const merchant = this.extractMerchant(lines);\n        // Extract line items FIRST (including tax)\n        const items = this.extractItems(lines);\n        // Extract total amount using the new rule\n        const amount = this.extractValidatedTotal(lines, items);\n        // Extract date\n        const date = this.extractDate(lines);\n        const parsed = {\n            merchant,\n            amount,\n            date,\n            items,\n            rawText: ocrText,\n            confidence: Math.max(confidence * 0.8, 60) // Adjust confidence for parsing uncertainty\n        };\n        console.log('✅ Receipt parsed successfully:', parsed);\n        return parsed;\n    }\n    extractMerchant(lines) {\n        // Common merchant patterns to look for\n        const merchantPatterns = [\n            /^([A-Za-z\\s&'.-]{3,40})$/,\n            /^([A-Z\\s&'.-]{3,40})\\s+STORE/,\n            /^([A-Z\\s&'.-]{3,40})\\s+MARKET/,\n            /^([A-Z\\s&'.-]{3,40})\\s+INC/\n        ];\n        // Look for merchant name in first 7 lines\n        for(let i = 0; i < Math.min(7, lines.length); i++){\n            const line = lines[i].trim();\n            // Skip obviously non-merchant lines\n            if (line.match(/^\\d+/) || line.includes('RECEIPT') || line.includes('INVOICE') || line.includes('#') || line.includes('TEL') || line.includes('WWW') || line.includes('@') || line.includes('.COM') || line.includes('STREET') || line.includes('AVE') || line.includes('BLVD') || line.includes('RD') || line.length < 3 || line.length > 50) {\n                continue;\n            }\n            // Try merchant patterns\n            for (const pattern of merchantPatterns){\n                const match = line.match(pattern);\n                if (match) {\n                    return match[1].trim().toUpperCase();\n                }\n            }\n            // If no pattern matches but line looks like merchant name\n            if (line.match(/^[A-Za-z\\s&'.-]+$/) && line.length >= 3 && line.length <= 40) {\n                // Check if it's not a common non-merchant word\n                const nonMerchantWords = [\n                    'THANK',\n                    'YOU',\n                    'VISIT',\n                    'AGAIN',\n                    'CUSTOMER',\n                    'COPY'\n                ];\n                if (!nonMerchantWords.some((word)=>line.includes(word))) {\n                    return line.toUpperCase();\n                }\n            }\n        }\n        return 'UNKNOWN MERCHANT';\n    }\n    extractValidatedTotal(lines, items) {\n        console.log('🔍 Looking for total that matches item sum...');\n        // Calculate expected total from items\n        const itemsTotal = items.reduce((sum, item)=>sum + item.price, 0);\n        console.log(\"Items sum to: $\".concat(itemsTotal.toFixed(2)));\n        // Look specifically for \"Total\" followed by dollar amount\n        const totalPatterns = [\n            /TOTAL\\s+[$]?(\\d+\\.\\d{2})/i,\n            /TOTAL\\s*:\\s*[$]?(\\d+\\.\\d{2})/i,\n            /TOTAL.*?[$](\\d+\\.\\d{2})/i\n        ];\n        const foundTotals = [];\n        // Find all potential totals\n        for(let i = 0; i < lines.length; i++){\n            const line = lines[i].trim();\n            for (const pattern of totalPatterns){\n                const match = line.match(pattern);\n                if (match) {\n                    const amount = parseFloat(match[1]);\n                    if (!isNaN(amount) && amount > 0) {\n                        foundTotals.push({\n                            amount,\n                            line\n                        });\n                        console.log(\"Found potential total: $\".concat(amount, ' in \"').concat(line, '\"'));\n                    }\n                }\n            }\n        }\n        // If we have items, try to match total to items sum\n        if (itemsTotal > 0 && foundTotals.length > 0) {\n            console.log('Validating totals against items sum...');\n            for (const total of foundTotals){\n                const difference = Math.abs(total.amount - itemsTotal);\n                console.log(\"Total $\".concat(total.amount, \" vs Items $\").concat(itemsTotal.toFixed(2), \" - difference: $\").concat(difference.toFixed(2)));\n                // Allow small rounding differences (±$0.05)\n                if (difference <= 0.05) {\n                    console.log(\"✅ Found matching total: $\".concat(total.amount));\n                    return total.amount;\n                }\n            }\n            // If no exact match, look for closest total that's reasonable\n            const sortedByCloseness = foundTotals.sort((a, b)=>Math.abs(a.amount - itemsTotal) - Math.abs(b.amount - itemsTotal));\n            const closest = sortedByCloseness[0];\n            if (closest && Math.abs(closest.amount - itemsTotal) <= itemsTotal * 0.1) {\n                console.log(\"⚠️ Using closest total: $\".concat(closest.amount, \" (\").concat(Math.abs(closest.amount - itemsTotal).toFixed(2), \" difference)\"));\n                return closest.amount;\n            }\n        }\n        // Fallback: use any \"Total\" we found\n        if (foundTotals.length > 0) {\n            console.log(\"⚠️ Using first total found: $\".concat(foundTotals[0].amount));\n            return foundTotals[0].amount;\n        }\n        // Final fallback: use items sum if we have items\n        if (itemsTotal > 0) {\n            console.log(\"⚠️ No total found, using items sum: $\".concat(itemsTotal.toFixed(2)));\n            return itemsTotal;\n        }\n        // Last resort: use old method\n        console.log('⚠️ Falling back to old total extraction method');\n        return this.extractTotalAmount(lines);\n    }\n    extractTotalAmount(lines) {\n        // Enhanced total amount patterns\n        const totalPatterns = [\n            /TOTAL.*?[$]?(\\d+\\.?\\d{2})/i,\n            /AMOUNT\\s+DUE.*?[$]?(\\d+\\.?\\d{2})/i,\n            /BALANCE.*?[$]?(\\d+\\.?\\d{2})/i,\n            /GRAND\\s+TOTAL.*?[$]?(\\d+\\.?\\d{2})/i,\n            /FINAL\\s+TOTAL.*?[$]?(\\d+\\.?\\d{2})/i,\n            /[$](\\d+\\.\\d{2})\\s*$/,\n            /(\\d+\\.\\d{2})\\s*TOTAL/i,\n            /TOTAL\\s+[$]?(\\d+\\.\\d{2})/i,\n            /[$]\\s*(\\d+\\.\\d{2})\\s*TOTAL/i\n        ];\n        console.log('🔍 Looking for total amount in lines:', lines.slice(-10));\n        // Search from bottom up as totals are usually at the end\n        for(let i = lines.length - 1; i >= Math.max(0, lines.length - 15); i--){\n            const line = lines[i].trim();\n            if (line.length === 0) continue;\n            console.log(\"Checking line \".concat(i, ': \"').concat(line, '\"'));\n            for (const pattern of totalPatterns){\n                const match = line.match(pattern);\n                if (match) {\n                    const amount = parseFloat(match[1]);\n                    console.log(\"Found potential total: \".concat(amount, \" from pattern: \").concat(pattern));\n                    if (!isNaN(amount) && amount > 0 && amount < 10000) {\n                        console.log(\"✅ Using total amount: \".concat(amount));\n                        return amount;\n                    }\n                }\n            }\n        }\n        console.log('⚠️ No clear total found, looking for largest amount');\n        // If no clear total found, look for largest reasonable amount\n        const amounts = [];\n        lines.forEach((line, index)=>{\n            // Look for money amounts: $X.XX or X.XX\n            const matches = line.match(/[$]?(\\d+\\.\\d{2})/g) || [];\n            matches.forEach((match)=>{\n                const amount = parseFloat(match.replace('$', ''));\n                if (!isNaN(amount) && amount > 0 && amount < 10000) {\n                    console.log(\"Found amount \".concat(amount, \" on line \").concat(index, ': \"').concat(line, '\"'));\n                    amounts.push(amount);\n                }\n            });\n        });\n        const maxAmount = amounts.length > 0 ? Math.max(...amounts) : 0;\n        console.log(\"Using largest amount found: \".concat(maxAmount));\n        return maxAmount;\n    }\n    extractDate(lines) {\n        const datePatterns = [\n            /(\\d{1,2}\\/\\d{1,2}\\/\\d{2,4})/,\n            /(\\d{1,2}-\\d{1,2}-\\d{2,4})/,\n            /(\\d{4}-\\d{2}-\\d{2})/,\n            /(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec).*?(\\d{1,2}),?\\s*(\\d{4})/i\n        ];\n        for (const line of lines){\n            for (const pattern of datePatterns){\n                const match = line.match(pattern);\n                if (match) {\n                    try {\n                        // Try to parse and normalize the date\n                        const dateStr = match[0];\n                        const date = new Date(dateStr);\n                        if (!isNaN(date.getTime())) {\n                            return date.toISOString().split('T')[0]; // Return YYYY-MM-DD format\n                        }\n                    } catch (e) {\n                        continue;\n                    }\n                }\n            }\n        }\n        // Default to today if no date found\n        return new Date().toISOString().split('T')[0];\n    }\n    extractItems(lines) {\n        const items = [];\n        console.log('🔍 Extracting items from lines...');\n        for(let i = 0; i < lines.length; i++){\n            const line = lines[i].trim();\n            if (line.length === 0) continue;\n            // Enhanced item patterns\n            const itemPatterns = [\n                /^(\\d+)\\s+(.+?)\\s+[$]?(\\d+\\.\\d{2})$/,\n                /^(\\d+)\\s+(.+?)\\s+(\\d+\\.\\d{2})\\s*$/,\n                /^(.+?)\\s{2,}[$]?(\\d+\\.\\d{2})$/,\n                /^(.+?)\\s+[$](\\d+\\.\\d{2})$/,\n                /^(.+?)\\s+(\\d+\\.\\d{2})\\s*$/,\n                /^(.{3,30}?)\\s+(\\d{1,3}\\.\\d{2})$/ // Generic: name followed by price\n            ];\n            for (const pattern of itemPatterns){\n                const match = line.match(pattern);\n                if (match) {\n                    let quantity;\n                    let name;\n                    let price;\n                    if (match.length === 4) {\n                        // Pattern with quantity\n                        quantity = parseInt(match[1]);\n                        name = match[2].trim();\n                        price = parseFloat(match[3]);\n                    } else {\n                        // Pattern without quantity\n                        name = match[1].trim();\n                        price = parseFloat(match[2]);\n                    }\n                    // Check if this is a tax item (include it!)\n                    const isTaxItem = /TAX|HST|GST|PST|VAT/i.test(name) || /TAX|HST|GST|PST|VAT/i.test(line);\n                    // Enhanced filtering for non-item lines (but allow tax items)\n                    const excludePatterns = [\n                        /TOTAL|SUBTOTAL|CHANGE|BALANCE|RECEIPT|STORE|THANK|VISIT|AGAIN|CUSTOMER|COPY/i,\n                        /^(SUB|GRAND|FINAL)/i,\n                        /PAYMENT|CASH|CREDIT|DEBIT|CARD/i,\n                        /^(DATE|TIME|CLERK|CASHIER)/i,\n                        /^\\d{1,2}\\/\\d{1,2}\\/\\d{2,4}/,\n                        /^\\d{2}:\\d{2}/\n                    ];\n                    const shouldExclude = !isTaxItem && (excludePatterns.some((pattern)=>pattern.test(name)) || excludePatterns.some((pattern)=>pattern.test(line)));\n                    if (name && !shouldExclude && name.length >= 2 && name.length <= 50 && price > 0 && price <= 1000 && !name.match(/^\\d+$/) && // Not just numbers\n                    name.match(/[A-Za-z]/) // Contains at least one letter\n                    ) {\n                        const itemType = isTaxItem ? ' [TAX]' : '';\n                        console.log('✅ Found item: \"'.concat(name, '\" - $').concat(price) + (quantity ? \" (qty: \".concat(quantity, \")\") : '') + itemType);\n                        items.push({\n                            name: name.toUpperCase(),\n                            price,\n                            quantity\n                        });\n                    }\n                    break;\n                }\n            }\n        }\n        console.log(\"Found \".concat(items.length, \" items total\"));\n        return items;\n    }\n    async cleanup() {\n        if (this.worker) {\n            await this.worker.terminate();\n            this.worker = null;\n            this.isInitialized = false;\n            console.log('🧹 OCR engine cleaned up');\n        }\n    }\n    constructor(){\n        this.worker = null;\n        this.isInitialized = false;\n    }\n}\n// Export singleton instance\nconst ocrService = new OCRService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./services/ocrService.ts\n"));

/***/ })

});